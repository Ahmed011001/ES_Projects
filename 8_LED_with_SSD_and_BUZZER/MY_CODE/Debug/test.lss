
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  000022c4  00002338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001bfc  00000000  00000000  0000246c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e3f  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00004ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  00005027  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  000051fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  00007209  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  00008379  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000937c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  0000951c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  000097dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a08b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <main>
      7a:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	e8 59       	subi	r30, 0x98	; 152
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <BUZ_voidInit>:
* Parameters :
            => struct has the buz port , pin , status
* return : void 
*/
void BUZ_voidInit( BUZ_Type BUZ_Configuration )
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	00 d0       	rcall	.+0      	; 0xccc <BUZ_voidInit+0x6>
     ccc:	0f 92       	push	r0
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	69 83       	std	Y+1, r22	; 0x01
     cd4:	7a 83       	std	Y+2, r23	; 0x02
     cd6:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_enumSetPinDirection( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_OUTPUT );
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	9a 81       	ldd	r25, Y+2	; 0x02
     cdc:	69 2f       	mov	r22, r25
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_enumSetPinDirection>
	
}
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <BUZ_voidOn>:
* Parameters :
            => struct has the buz port , pin , status
* return : void 
*/
void BUZ_voidOn  ( BUZ_Type BUZ_Configuration )
{
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <BUZ_voidOn+0x6>
     cf6:	0f 92       	push	r0
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	69 83       	std	Y+1, r22	; 0x01
     cfe:	7a 83       	std	Y+2, r23	; 0x02
     d00:	8b 83       	std	Y+3, r24	; 0x03
	
	if( BUZ_Configuration.Active_State == ACTIVE_HIGH ){
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	39 f4       	brne	.+14     	; 0xd16 <BUZ_voidOn+0x26>
		
		DIO_enumSetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_HIGH );
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	9a 81       	ldd	r25, Y+2	; 0x02
     d0c:	69 2f       	mov	r22, r25
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>
     d14:	09 c0       	rjmp	.+18     	; 0xd28 <BUZ_voidOn+0x38>
		
	}else if( BUZ_Configuration.Active_State == ACTIVE_LOW ){
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	88 23       	and	r24, r24
     d1a:	31 f4       	brne	.+12     	; 0xd28 <BUZ_voidOn+0x38>
		
		DIO_enumSetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_LOW  );
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	69 2f       	mov	r22, r25
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>
		
	}
	
}
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <BUZ_voidOff>:
* Parameters :
             => struct has the buz port , pin , status
* return : void 
*/
void BUZ_voidOff ( BUZ_Type BUZ_Configuration )
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	00 d0       	rcall	.+0      	; 0xd3a <BUZ_voidOff+0x6>
     d3a:	0f 92       	push	r0
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	69 83       	std	Y+1, r22	; 0x01
     d42:	7a 83       	std	Y+2, r23	; 0x02
     d44:	8b 83       	std	Y+3, r24	; 0x03
	
	if( BUZ_Configuration.Active_State == ACTIVE_HIGH ){
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	39 f4       	brne	.+14     	; 0xd5a <BUZ_voidOff+0x26>
		
		DIO_enumSetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_LOW  );
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	69 2f       	mov	r22, r25
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>
     d58:	09 c0       	rjmp	.+18     	; 0xd6c <BUZ_voidOff+0x38>
		
	}else if( BUZ_Configuration.Active_State == ACTIVE_LOW ){
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	88 23       	and	r24, r24
     d5e:	31 f4       	brne	.+12     	; 0xd6c <BUZ_voidOff+0x38>
		
		DIO_enumSetPinValue( BUZ_Configuration.Port , BUZ_Configuration.Pin , DIO_PIN_HIGH  );
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	9a 81       	ldd	r25, Y+2	; 0x02
     d64:	69 2f       	mov	r22, r25
     d66:	41 e0       	ldi	r20, 0x01	; 1
     d68:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>
		
	}
	
}
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <BUZ_voidToggle>:
* Parameters :
             => struct has the buz port , pin , status
* return : void 
*/
void BUZ_voidToggle      ( BUZ_Type BUZ_Configuration )
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <BUZ_voidToggle+0x6>
     d7e:	0f 92       	push	r0
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	69 83       	std	Y+1, r22	; 0x01
     d86:	7a 83       	std	Y+2, r23	; 0x02
     d88:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue  ( BUZ_Configuration.Port , BUZ_Configuration.Pin );
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	9a 81       	ldd	r25, Y+2	; 0x02
     d8e:	69 2f       	mov	r22, r25
     d90:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enumTogglePinValue>
}
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <DIO_enumSetPinDirection>:
#include "DIO_private.h"

/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< IO PIN <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/

DIO_ErrorStatus DIO_enumSetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	28 97       	sbiw	r28, 0x08	; 8
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	8a 83       	std	Y+2, r24	; 0x02
     db6:	6b 83       	std	Y+3, r22	; 0x03
     db8:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7)
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	84 30       	cpi	r24, 0x04	; 4
     dc2:	08 f0       	brcs	.+2      	; 0xdc6 <DIO_enumSetPinDirection+0x26>
     dc4:	f1 c0       	rjmp	.+482    	; 0xfa8 <DIO_enumSetPinDirection+0x208>
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	88 30       	cpi	r24, 0x08	; 8
     dca:	08 f0       	brcs	.+2      	; 0xdce <DIO_enumSetPinDirection+0x2e>
     dcc:	ed c0       	rjmp	.+474    	; 0xfa8 <DIO_enumSetPinDirection+0x208>
	{
		if (Copy_u8Direction == DIO_PIN_OUTPUT)
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <DIO_enumSetPinDirection+0x36>
     dd4:	6f c0       	rjmp	.+222    	; 0xeb4 <DIO_enumSetPinDirection+0x114>
		{
			switch (Copy_u8Port)
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	38 87       	std	Y+8, r19	; 0x08
     dde:	2f 83       	std	Y+7, r18	; 0x07
     de0:	8f 81       	ldd	r24, Y+7	; 0x07
     de2:	98 85       	ldd	r25, Y+8	; 0x08
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	91 05       	cpc	r25, r1
     de8:	49 f1       	breq	.+82     	; 0xe3c <DIO_enumSetPinDirection+0x9c>
     dea:	2f 81       	ldd	r18, Y+7	; 0x07
     dec:	38 85       	ldd	r19, Y+8	; 0x08
     dee:	22 30       	cpi	r18, 0x02	; 2
     df0:	31 05       	cpc	r19, r1
     df2:	2c f4       	brge	.+10     	; 0xdfe <DIO_enumSetPinDirection+0x5e>
     df4:	8f 81       	ldd	r24, Y+7	; 0x07
     df6:	98 85       	ldd	r25, Y+8	; 0x08
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	61 f0       	breq	.+24     	; 0xe14 <DIO_enumSetPinDirection+0x74>
     dfc:	d6 c0       	rjmp	.+428    	; 0xfaa <DIO_enumSetPinDirection+0x20a>
     dfe:	2f 81       	ldd	r18, Y+7	; 0x07
     e00:	38 85       	ldd	r19, Y+8	; 0x08
     e02:	22 30       	cpi	r18, 0x02	; 2
     e04:	31 05       	cpc	r19, r1
     e06:	71 f1       	breq	.+92     	; 0xe64 <DIO_enumSetPinDirection+0xc4>
     e08:	8f 81       	ldd	r24, Y+7	; 0x07
     e0a:	98 85       	ldd	r25, Y+8	; 0x08
     e0c:	83 30       	cpi	r24, 0x03	; 3
     e0e:	91 05       	cpc	r25, r1
     e10:	e9 f1       	breq	.+122    	; 0xe8c <DIO_enumSetPinDirection+0xec>
     e12:	cb c0       	rjmp	.+406    	; 0xfaa <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA : SET_BIT(DDRA_Register, Copy_u8Pin); break;
     e14:	aa e3       	ldi	r26, 0x3A	; 58
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	ea e3       	ldi	r30, 0x3A	; 58
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_enumSetPinDirection+0x92>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_enumSetPinDirection+0x8e>
     e36:	84 2b       	or	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	b7 c0       	rjmp	.+366    	; 0xfaa <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB : SET_BIT(DDRB_Register, Copy_u8Pin); break;
     e3c:	a7 e3       	ldi	r26, 0x37	; 55
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e7 e3       	ldi	r30, 0x37	; 55
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_enumSetPinDirection+0xba>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_enumSetPinDirection+0xb6>
     e5e:	84 2b       	or	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	a3 c0       	rjmp	.+326    	; 0xfaa <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC : SET_BIT(DDRC_Register, Copy_u8Pin); break;
     e64:	a4 e3       	ldi	r26, 0x34	; 52
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e4 e3       	ldi	r30, 0x34	; 52
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_enumSetPinDirection+0xe2>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_enumSetPinDirection+0xde>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	8f c0       	rjmp	.+286    	; 0xfaa <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD : SET_BIT(DDRD_Register, Copy_u8Pin); break;
     e8c:	a1 e3       	ldi	r26, 0x31	; 49
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e1 e3       	ldi	r30, 0x31	; 49
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_enumSetPinDirection+0x10a>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_enumSetPinDirection+0x106>
     eae:	84 2b       	or	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	7b c0       	rjmp	.+246    	; 0xfaa <DIO_enumSetPinDirection+0x20a>
			}
		}
		
		else if (Copy_u8Direction == DIO_PIN_INPUT)
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	88 23       	and	r24, r24
     eb8:	09 f0       	breq	.+2      	; 0xebc <DIO_enumSetPinDirection+0x11c>
     eba:	74 c0       	rjmp	.+232    	; 0xfa4 <DIO_enumSetPinDirection+0x204>
		{
			switch (Copy_u8Port)
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	3e 83       	std	Y+6, r19	; 0x06
     ec4:	2d 83       	std	Y+5, r18	; 0x05
     ec6:	8d 81       	ldd	r24, Y+5	; 0x05
     ec8:	9e 81       	ldd	r25, Y+6	; 0x06
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	91 05       	cpc	r25, r1
     ece:	59 f1       	breq	.+86     	; 0xf26 <DIO_enumSetPinDirection+0x186>
     ed0:	2d 81       	ldd	r18, Y+5	; 0x05
     ed2:	3e 81       	ldd	r19, Y+6	; 0x06
     ed4:	22 30       	cpi	r18, 0x02	; 2
     ed6:	31 05       	cpc	r19, r1
     ed8:	2c f4       	brge	.+10     	; 0xee4 <DIO_enumSetPinDirection+0x144>
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	9e 81       	ldd	r25, Y+6	; 0x06
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	69 f0       	breq	.+26     	; 0xefc <DIO_enumSetPinDirection+0x15c>
     ee2:	63 c0       	rjmp	.+198    	; 0xfaa <DIO_enumSetPinDirection+0x20a>
     ee4:	2d 81       	ldd	r18, Y+5	; 0x05
     ee6:	3e 81       	ldd	r19, Y+6	; 0x06
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	31 05       	cpc	r19, r1
     eec:	89 f1       	breq	.+98     	; 0xf50 <DIO_enumSetPinDirection+0x1b0>
     eee:	8d 81       	ldd	r24, Y+5	; 0x05
     ef0:	9e 81       	ldd	r25, Y+6	; 0x06
     ef2:	83 30       	cpi	r24, 0x03	; 3
     ef4:	91 05       	cpc	r25, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <DIO_enumSetPinDirection+0x15a>
     ef8:	40 c0       	rjmp	.+128    	; 0xf7a <DIO_enumSetPinDirection+0x1da>
     efa:	57 c0       	rjmp	.+174    	; 0xfaa <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA : CLR_BIT(DDRA_Register, Copy_u8Pin); break;
     efc:	aa e3       	ldi	r26, 0x3A	; 58
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ea e3       	ldi	r30, 0x3A	; 58
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_enumSetPinDirection+0x17a>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_enumSetPinDirection+0x176>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	42 c0       	rjmp	.+132    	; 0xfaa <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB : CLR_BIT(DDRB_Register, Copy_u8Pin); break;
     f26:	a7 e3       	ldi	r26, 0x37	; 55
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e7 e3       	ldi	r30, 0x37	; 55
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_enumSetPinDirection+0x1a4>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_enumSetPinDirection+0x1a0>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	2d c0       	rjmp	.+90     	; 0xfaa <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC : CLR_BIT(DDRC_Register, Copy_u8Pin); break;
     f50:	a4 e3       	ldi	r26, 0x34	; 52
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e4 e3       	ldi	r30, 0x34	; 52
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_enumSetPinDirection+0x1ce>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_enumSetPinDirection+0x1ca>
     f72:	80 95       	com	r24
     f74:	84 23       	and	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	18 c0       	rjmp	.+48     	; 0xfaa <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD : CLR_BIT(DDRD_Register, Copy_u8Pin); break;
     f7a:	a1 e3       	ldi	r26, 0x31	; 49
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e1 e3       	ldi	r30, 0x31	; 49
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_enumSetPinDirection+0x1f8>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_enumSetPinDirection+0x1f4>
     f9c:	80 95       	com	r24
     f9e:	84 23       	and	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	03 c0       	rjmp	.+6      	; 0xfaa <DIO_enumSetPinDirection+0x20a>
			}			
		}
		
		else
		{
			LOC_enumState = DIO_NOK;
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <DIO_enumSetPinDirection+0x20a>
		}
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
     fa8:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 
     faa:	89 81       	ldd	r24, Y+1	; 0x01
}
     fac:	28 96       	adiw	r28, 0x08	; 8
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <DIO_enumSetPinValue>:

DIO_ErrorStatus DIO_enumSetPinValue     (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value    )
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	28 97       	sbiw	r28, 0x08	; 8
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	8a 83       	std	Y+2, r24	; 0x02
     fd4:	6b 83       	std	Y+3, r22	; 0x03
     fd6:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7)
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	84 30       	cpi	r24, 0x04	; 4
     fe0:	08 f0       	brcs	.+2      	; 0xfe4 <DIO_enumSetPinValue+0x26>
     fe2:	f1 c0       	rjmp	.+482    	; 0x11c6 <DIO_enumSetPinValue+0x208>
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 30       	cpi	r24, 0x08	; 8
     fe8:	08 f0       	brcs	.+2      	; 0xfec <DIO_enumSetPinValue+0x2e>
     fea:	ed c0       	rjmp	.+474    	; 0x11c6 <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	09 f0       	breq	.+2      	; 0xff4 <DIO_enumSetPinValue+0x36>
     ff2:	6f c0       	rjmp	.+222    	; 0x10d2 <DIO_enumSetPinValue+0x114>
		{
			switch (Copy_u8Port)
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	38 87       	std	Y+8, r19	; 0x08
     ffc:	2f 83       	std	Y+7, r18	; 0x07
     ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    1000:	98 85       	ldd	r25, Y+8	; 0x08
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	91 05       	cpc	r25, r1
    1006:	49 f1       	breq	.+82     	; 0x105a <DIO_enumSetPinValue+0x9c>
    1008:	2f 81       	ldd	r18, Y+7	; 0x07
    100a:	38 85       	ldd	r19, Y+8	; 0x08
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	2c f4       	brge	.+10     	; 0x101c <DIO_enumSetPinValue+0x5e>
    1012:	8f 81       	ldd	r24, Y+7	; 0x07
    1014:	98 85       	ldd	r25, Y+8	; 0x08
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	61 f0       	breq	.+24     	; 0x1032 <DIO_enumSetPinValue+0x74>
    101a:	d6 c0       	rjmp	.+428    	; 0x11c8 <DIO_enumSetPinValue+0x20a>
    101c:	2f 81       	ldd	r18, Y+7	; 0x07
    101e:	38 85       	ldd	r19, Y+8	; 0x08
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	71 f1       	breq	.+92     	; 0x1082 <DIO_enumSetPinValue+0xc4>
    1026:	8f 81       	ldd	r24, Y+7	; 0x07
    1028:	98 85       	ldd	r25, Y+8	; 0x08
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	91 05       	cpc	r25, r1
    102e:	e9 f1       	breq	.+122    	; 0x10aa <DIO_enumSetPinValue+0xec>
    1030:	cb c0       	rjmp	.+406    	; 0x11c8 <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA : SET_BIT(PORTA_Register, Copy_u8Pin); break;
    1032:	ab e3       	ldi	r26, 0x3B	; 59
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	eb e3       	ldi	r30, 0x3B	; 59
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_enumSetPinValue+0x92>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_enumSetPinValue+0x8e>
    1054:	84 2b       	or	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	b7 c0       	rjmp	.+366    	; 0x11c8 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB : SET_BIT(PORTB_Register, Copy_u8Pin); break;
    105a:	a8 e3       	ldi	r26, 0x38	; 56
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e8 e3       	ldi	r30, 0x38	; 56
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_enumSetPinValue+0xba>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_enumSetPinValue+0xb6>
    107c:	84 2b       	or	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	a3 c0       	rjmp	.+326    	; 0x11c8 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC : SET_BIT(PORTC_Register, Copy_u8Pin); break;
    1082:	a5 e3       	ldi	r26, 0x35	; 53
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e5 e3       	ldi	r30, 0x35	; 53
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_enumSetPinValue+0xe2>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_enumSetPinValue+0xde>
    10a4:	84 2b       	or	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	8f c0       	rjmp	.+286    	; 0x11c8 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD : SET_BIT(PORTD_Register, Copy_u8Pin); break;
    10aa:	a2 e3       	ldi	r26, 0x32	; 50
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e2 e3       	ldi	r30, 0x32	; 50
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_enumSetPinValue+0x10a>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_enumSetPinValue+0x106>
    10cc:	84 2b       	or	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	7b c0       	rjmp	.+246    	; 0x11c8 <DIO_enumSetPinValue+0x20a>
			}
		}
		
		else if (Copy_u8Value == DIO_PIN_LOW)
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	88 23       	and	r24, r24
    10d6:	09 f0       	breq	.+2      	; 0x10da <DIO_enumSetPinValue+0x11c>
    10d8:	74 c0       	rjmp	.+232    	; 0x11c2 <DIO_enumSetPinValue+0x204>
		{
			switch (Copy_u8Port)
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	3e 83       	std	Y+6, r19	; 0x06
    10e2:	2d 83       	std	Y+5, r18	; 0x05
    10e4:	8d 81       	ldd	r24, Y+5	; 0x05
    10e6:	9e 81       	ldd	r25, Y+6	; 0x06
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	91 05       	cpc	r25, r1
    10ec:	59 f1       	breq	.+86     	; 0x1144 <DIO_enumSetPinValue+0x186>
    10ee:	2d 81       	ldd	r18, Y+5	; 0x05
    10f0:	3e 81       	ldd	r19, Y+6	; 0x06
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	2c f4       	brge	.+10     	; 0x1102 <DIO_enumSetPinValue+0x144>
    10f8:	8d 81       	ldd	r24, Y+5	; 0x05
    10fa:	9e 81       	ldd	r25, Y+6	; 0x06
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	69 f0       	breq	.+26     	; 0x111a <DIO_enumSetPinValue+0x15c>
    1100:	63 c0       	rjmp	.+198    	; 0x11c8 <DIO_enumSetPinValue+0x20a>
    1102:	2d 81       	ldd	r18, Y+5	; 0x05
    1104:	3e 81       	ldd	r19, Y+6	; 0x06
    1106:	22 30       	cpi	r18, 0x02	; 2
    1108:	31 05       	cpc	r19, r1
    110a:	89 f1       	breq	.+98     	; 0x116e <DIO_enumSetPinValue+0x1b0>
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	83 30       	cpi	r24, 0x03	; 3
    1112:	91 05       	cpc	r25, r1
    1114:	09 f4       	brne	.+2      	; 0x1118 <DIO_enumSetPinValue+0x15a>
    1116:	40 c0       	rjmp	.+128    	; 0x1198 <DIO_enumSetPinValue+0x1da>
    1118:	57 c0       	rjmp	.+174    	; 0x11c8 <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA : CLR_BIT(PORTA_Register, Copy_u8Pin); break;
    111a:	ab e3       	ldi	r26, 0x3B	; 59
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	eb e3       	ldi	r30, 0x3B	; 59
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <DIO_enumSetPinValue+0x17a>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <DIO_enumSetPinValue+0x176>
    113c:	80 95       	com	r24
    113e:	84 23       	and	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	42 c0       	rjmp	.+132    	; 0x11c8 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB : CLR_BIT(PORTB_Register, Copy_u8Pin); break;
    1144:	a8 e3       	ldi	r26, 0x38	; 56
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e8 e3       	ldi	r30, 0x38	; 56
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_enumSetPinValue+0x1a4>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_enumSetPinValue+0x1a0>
    1166:	80 95       	com	r24
    1168:	84 23       	and	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	2d c0       	rjmp	.+90     	; 0x11c8 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC : CLR_BIT(PORTC_Register, Copy_u8Pin); break;
    116e:	a5 e3       	ldi	r26, 0x35	; 53
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e5 e3       	ldi	r30, 0x35	; 53
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <DIO_enumSetPinValue+0x1ce>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <DIO_enumSetPinValue+0x1ca>
    1190:	80 95       	com	r24
    1192:	84 23       	and	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	18 c0       	rjmp	.+48     	; 0x11c8 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD : CLR_BIT(PORTD_Register, Copy_u8Pin); break;
    1198:	a2 e3       	ldi	r26, 0x32	; 50
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e2 e3       	ldi	r30, 0x32	; 50
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_enumSetPinValue+0x1f8>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_enumSetPinValue+0x1f4>
    11ba:	80 95       	com	r24
    11bc:	84 23       	and	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	03 c0       	rjmp	.+6      	; 0x11c8 <DIO_enumSetPinValue+0x20a>
			}			
		}
		
		else
		{
			LOC_enumState = DIO_NOK;
    11c2:	19 82       	std	Y+1, r1	; 0x01
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <DIO_enumSetPinValue+0x20a>
		}
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
    11c6:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 	
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ca:	28 96       	adiw	r28, 0x08	; 8
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <DIO_enumGetPinValue>:

DIO_ErrorStatus DIO_enumGetPinValue     (u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_u8PtrData )
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	27 97       	sbiw	r28, 0x07	; 7
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	8a 83       	std	Y+2, r24	; 0x02
    11f2:	6b 83       	std	Y+3, r22	; 0x03
    11f4:	5d 83       	std	Y+5, r21	; 0x05
    11f6:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7)
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	84 30       	cpi	r24, 0x04	; 4
    1200:	08 f0       	brcs	.+2      	; 0x1204 <DIO_enumGetPinValue+0x28>
    1202:	a6 c0       	rjmp	.+332    	; 0x1350 <DIO_enumGetPinValue+0x174>
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	88 30       	cpi	r24, 0x08	; 8
    1208:	08 f0       	brcs	.+2      	; 0x120c <DIO_enumGetPinValue+0x30>
    120a:	a2 c0       	rjmp	.+324    	; 0x1350 <DIO_enumGetPinValue+0x174>
	{
		switch (Copy_u8Port)
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	3f 83       	std	Y+7, r19	; 0x07
    1214:	2e 83       	std	Y+6, r18	; 0x06
    1216:	4e 81       	ldd	r20, Y+6	; 0x06
    1218:	5f 81       	ldd	r21, Y+7	; 0x07
    121a:	41 30       	cpi	r20, 0x01	; 1
    121c:	51 05       	cpc	r21, r1
    121e:	c1 f1       	breq	.+112    	; 0x1290 <DIO_enumGetPinValue+0xb4>
    1220:	8e 81       	ldd	r24, Y+6	; 0x06
    1222:	9f 81       	ldd	r25, Y+7	; 0x07
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	34 f4       	brge	.+12     	; 0x1236 <DIO_enumGetPinValue+0x5a>
    122a:	2e 81       	ldd	r18, Y+6	; 0x06
    122c:	3f 81       	ldd	r19, Y+7	; 0x07
    122e:	21 15       	cp	r18, r1
    1230:	31 05       	cpc	r19, r1
    1232:	71 f0       	breq	.+28     	; 0x1250 <DIO_enumGetPinValue+0x74>
    1234:	8e c0       	rjmp	.+284    	; 0x1352 <DIO_enumGetPinValue+0x176>
    1236:	4e 81       	ldd	r20, Y+6	; 0x06
    1238:	5f 81       	ldd	r21, Y+7	; 0x07
    123a:	42 30       	cpi	r20, 0x02	; 2
    123c:	51 05       	cpc	r21, r1
    123e:	09 f4       	brne	.+2      	; 0x1242 <DIO_enumGetPinValue+0x66>
    1240:	47 c0       	rjmp	.+142    	; 0x12d0 <DIO_enumGetPinValue+0xf4>
    1242:	8e 81       	ldd	r24, Y+6	; 0x06
    1244:	9f 81       	ldd	r25, Y+7	; 0x07
    1246:	83 30       	cpi	r24, 0x03	; 3
    1248:	91 05       	cpc	r25, r1
    124a:	09 f4       	brne	.+2      	; 0x124e <DIO_enumGetPinValue+0x72>
    124c:	61 c0       	rjmp	.+194    	; 0x1310 <DIO_enumGetPinValue+0x134>
    124e:	81 c0       	rjmp	.+258    	; 0x1352 <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA : *Copy_u8PtrData = GET_BIT(PINA_Register, Copy_u8Pin); break;
    1250:	e9 e3       	ldi	r30, 0x39	; 57
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	50 e0       	ldi	r21, 0x00	; 0
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_enumGetPinValue+0x8e>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	2a 95       	dec	r18
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_enumGetPinValue+0x8a>
    126e:	9a 01       	movw	r18, r20
    1270:	28 23       	and	r18, r24
    1272:	39 23       	and	r19, r25
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	88 2f       	mov	r24, r24
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a9 01       	movw	r20, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO_enumGetPinValue+0xa6>
    127e:	55 95       	asr	r21
    1280:	47 95       	ror	r20
    1282:	8a 95       	dec	r24
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO_enumGetPinValue+0xa2>
    1286:	ca 01       	movw	r24, r20
    1288:	ec 81       	ldd	r30, Y+4	; 0x04
    128a:	fd 81       	ldd	r31, Y+5	; 0x05
    128c:	80 83       	st	Z, r24
    128e:	61 c0       	rjmp	.+194    	; 0x1352 <DIO_enumGetPinValue+0x176>
		case DIO_PORTB : *Copy_u8PtrData = GET_BIT(PINB_Register, Copy_u8Pin); break;
    1290:	e6 e3       	ldi	r30, 0x36	; 54
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_enumGetPinValue+0xce>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	2a 95       	dec	r18
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_enumGetPinValue+0xca>
    12ae:	9a 01       	movw	r18, r20
    12b0:	28 23       	and	r18, r24
    12b2:	39 23       	and	r19, r25
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a9 01       	movw	r20, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_enumGetPinValue+0xe6>
    12be:	55 95       	asr	r21
    12c0:	47 95       	ror	r20
    12c2:	8a 95       	dec	r24
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_enumGetPinValue+0xe2>
    12c6:	ca 01       	movw	r24, r20
    12c8:	ec 81       	ldd	r30, Y+4	; 0x04
    12ca:	fd 81       	ldd	r31, Y+5	; 0x05
    12cc:	80 83       	st	Z, r24
    12ce:	41 c0       	rjmp	.+130    	; 0x1352 <DIO_enumGetPinValue+0x176>
		case DIO_PORTC : *Copy_u8PtrData = GET_BIT(PINC_Register, Copy_u8Pin); break;
    12d0:	e3 e3       	ldi	r30, 0x33	; 51
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_enumGetPinValue+0x10e>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	2a 95       	dec	r18
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_enumGetPinValue+0x10a>
    12ee:	9a 01       	movw	r18, r20
    12f0:	28 23       	and	r18, r24
    12f2:	39 23       	and	r19, r25
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_enumGetPinValue+0x126>
    12fe:	55 95       	asr	r21
    1300:	47 95       	ror	r20
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_enumGetPinValue+0x122>
    1306:	ca 01       	movw	r24, r20
    1308:	ec 81       	ldd	r30, Y+4	; 0x04
    130a:	fd 81       	ldd	r31, Y+5	; 0x05
    130c:	80 83       	st	Z, r24
    130e:	21 c0       	rjmp	.+66     	; 0x1352 <DIO_enumGetPinValue+0x176>
		case DIO_PORTD : *Copy_u8PtrData = GET_BIT(PIND_Register, Copy_u8Pin); break;
    1310:	e0 e3       	ldi	r30, 0x30	; 48
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_enumGetPinValue+0x14e>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	2a 95       	dec	r18
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_enumGetPinValue+0x14a>
    132e:	9a 01       	movw	r18, r20
    1330:	28 23       	and	r18, r24
    1332:	39 23       	and	r19, r25
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	a9 01       	movw	r20, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_enumGetPinValue+0x166>
    133e:	55 95       	asr	r21
    1340:	47 95       	ror	r20
    1342:	8a 95       	dec	r24
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_enumGetPinValue+0x162>
    1346:	ca 01       	movw	r24, r20
    1348:	ec 81       	ldd	r30, Y+4	; 0x04
    134a:	fd 81       	ldd	r31, Y+5	; 0x05
    134c:	80 83       	st	Z, r24
    134e:	01 c0       	rjmp	.+2      	; 0x1352 <DIO_enumGetPinValue+0x176>
		}
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
    1350:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 	
    1352:	89 81       	ldd	r24, Y+1	; 0x01
}
    1354:	27 96       	adiw	r28, 0x07	; 7
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <DIO_enumTogglePinValue>:

DIO_ErrorStatus DIO_enumTogglePinValue  (u8 Copy_u8Port, u8 Copy_u8Pin                               )
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <DIO_enumTogglePinValue+0x6>
    136c:	00 d0       	rcall	.+0      	; 0x136e <DIO_enumTogglePinValue+0x8>
    136e:	0f 92       	push	r0
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	8a 83       	std	Y+2, r24	; 0x02
    1376:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7)
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	84 30       	cpi	r24, 0x04	; 4
    1380:	08 f0       	brcs	.+2      	; 0x1384 <DIO_enumTogglePinValue+0x1e>
    1382:	73 c0       	rjmp	.+230    	; 0x146a <DIO_enumTogglePinValue+0x104>
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	88 30       	cpi	r24, 0x08	; 8
    1388:	08 f0       	brcs	.+2      	; 0x138c <DIO_enumTogglePinValue+0x26>
    138a:	6f c0       	rjmp	.+222    	; 0x146a <DIO_enumTogglePinValue+0x104>
	{
		switch (Copy_u8Port)
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	3d 83       	std	Y+5, r19	; 0x05
    1394:	2c 83       	std	Y+4, r18	; 0x04
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	9d 81       	ldd	r25, Y+5	; 0x05
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	91 05       	cpc	r25, r1
    139e:	49 f1       	breq	.+82     	; 0x13f2 <DIO_enumTogglePinValue+0x8c>
    13a0:	2c 81       	ldd	r18, Y+4	; 0x04
    13a2:	3d 81       	ldd	r19, Y+5	; 0x05
    13a4:	22 30       	cpi	r18, 0x02	; 2
    13a6:	31 05       	cpc	r19, r1
    13a8:	2c f4       	brge	.+10     	; 0x13b4 <DIO_enumTogglePinValue+0x4e>
    13aa:	8c 81       	ldd	r24, Y+4	; 0x04
    13ac:	9d 81       	ldd	r25, Y+5	; 0x05
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	61 f0       	breq	.+24     	; 0x13ca <DIO_enumTogglePinValue+0x64>
    13b2:	5c c0       	rjmp	.+184    	; 0x146c <DIO_enumTogglePinValue+0x106>
    13b4:	2c 81       	ldd	r18, Y+4	; 0x04
    13b6:	3d 81       	ldd	r19, Y+5	; 0x05
    13b8:	22 30       	cpi	r18, 0x02	; 2
    13ba:	31 05       	cpc	r19, r1
    13bc:	71 f1       	breq	.+92     	; 0x141a <DIO_enumTogglePinValue+0xb4>
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	9d 81       	ldd	r25, Y+5	; 0x05
    13c2:	83 30       	cpi	r24, 0x03	; 3
    13c4:	91 05       	cpc	r25, r1
    13c6:	e9 f1       	breq	.+122    	; 0x1442 <DIO_enumTogglePinValue+0xdc>
    13c8:	51 c0       	rjmp	.+162    	; 0x146c <DIO_enumTogglePinValue+0x106>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register, Copy_u8Pin); break;
    13ca:	ab e3       	ldi	r26, 0x3B	; 59
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	eb e3       	ldi	r30, 0x3B	; 59
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <DIO_enumTogglePinValue+0x82>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <DIO_enumTogglePinValue+0x7e>
    13ec:	84 27       	eor	r24, r20
    13ee:	8c 93       	st	X, r24
    13f0:	3d c0       	rjmp	.+122    	; 0x146c <DIO_enumTogglePinValue+0x106>
		case DIO_PORTB : TOG_BIT(PORTB_Register, Copy_u8Pin); break;
    13f2:	a8 e3       	ldi	r26, 0x38	; 56
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e8 e3       	ldi	r30, 0x38	; 56
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_enumTogglePinValue+0xaa>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_enumTogglePinValue+0xa6>
    1414:	84 27       	eor	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	29 c0       	rjmp	.+82     	; 0x146c <DIO_enumTogglePinValue+0x106>
		case DIO_PORTC : TOG_BIT(PORTC_Register, Copy_u8Pin); break;
    141a:	a5 e3       	ldi	r26, 0x35	; 53
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e5 e3       	ldi	r30, 0x35	; 53
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_enumTogglePinValue+0xd2>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_enumTogglePinValue+0xce>
    143c:	84 27       	eor	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	15 c0       	rjmp	.+42     	; 0x146c <DIO_enumTogglePinValue+0x106>
		case DIO_PORTD : TOG_BIT(PORTD_Register, Copy_u8Pin); break;
    1442:	a2 e3       	ldi	r26, 0x32	; 50
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e2 e3       	ldi	r30, 0x32	; 50
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_enumTogglePinValue+0xfa>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_enumTogglePinValue+0xf6>
    1464:	84 27       	eor	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	01 c0       	rjmp	.+2      	; 0x146c <DIO_enumTogglePinValue+0x106>
		}		
	}

	else
	{
		LOC_enumState = DIO_NOK;
    146a:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 
    146c:	89 81       	ldd	r24, Y+1	; 0x01
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <DIO_enumSetPortDirection>:

/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< IO PORT <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/

DIO_ErrorStatus DIO_enumSetPortDirection (u8 Copy_u8Port, u8 Copy_u8Direction)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	00 d0       	rcall	.+0      	; 0x1484 <DIO_enumSetPortDirection+0x6>
    1484:	00 d0       	rcall	.+0      	; 0x1486 <DIO_enumSetPortDirection+0x8>
    1486:	0f 92       	push	r0
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	8a 83       	std	Y+2, r24	; 0x02
    148e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	84 30       	cpi	r24, 0x04	; 4
    1498:	a8 f5       	brcc	.+106    	; 0x1504 <DIO_enumSetPortDirection+0x86>
	{
		switch (Copy_u8Port)
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3d 83       	std	Y+5, r19	; 0x05
    14a2:	2c 83       	std	Y+4, r18	; 0x04
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
    14a6:	9d 81       	ldd	r25, Y+5	; 0x05
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	91 05       	cpc	r25, r1
    14ac:	d1 f0       	breq	.+52     	; 0x14e2 <DIO_enumSetPortDirection+0x64>
    14ae:	2c 81       	ldd	r18, Y+4	; 0x04
    14b0:	3d 81       	ldd	r19, Y+5	; 0x05
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <DIO_enumSetPortDirection+0x44>
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	9d 81       	ldd	r25, Y+5	; 0x05
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	61 f0       	breq	.+24     	; 0x14d8 <DIO_enumSetPortDirection+0x5a>
    14c0:	1f c0       	rjmp	.+62     	; 0x1500 <DIO_enumSetPortDirection+0x82>
    14c2:	2c 81       	ldd	r18, Y+4	; 0x04
    14c4:	3d 81       	ldd	r19, Y+5	; 0x05
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	81 f0       	breq	.+32     	; 0x14ec <DIO_enumSetPortDirection+0x6e>
    14cc:	8c 81       	ldd	r24, Y+4	; 0x04
    14ce:	9d 81       	ldd	r25, Y+5	; 0x05
    14d0:	83 30       	cpi	r24, 0x03	; 3
    14d2:	91 05       	cpc	r25, r1
    14d4:	81 f0       	breq	.+32     	; 0x14f6 <DIO_enumSetPortDirection+0x78>
    14d6:	14 c0       	rjmp	.+40     	; 0x1500 <DIO_enumSetPortDirection+0x82>
		{
		case DIO_PORTA : DDRA_Register = Copy_u8Direction; break;
    14d8:	ea e3       	ldi	r30, 0x3A	; 58
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	80 83       	st	Z, r24
    14e0:	12 c0       	rjmp	.+36     	; 0x1506 <DIO_enumSetPortDirection+0x88>
		case DIO_PORTB : DDRB_Register = Copy_u8Direction; break;
    14e2:	e7 e3       	ldi	r30, 0x37	; 55
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	80 83       	st	Z, r24
    14ea:	0d c0       	rjmp	.+26     	; 0x1506 <DIO_enumSetPortDirection+0x88>
		case DIO_PORTC : DDRC_Register = Copy_u8Direction; break;
    14ec:	e4 e3       	ldi	r30, 0x34	; 52
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	80 83       	st	Z, r24
    14f4:	08 c0       	rjmp	.+16     	; 0x1506 <DIO_enumSetPortDirection+0x88>
		case DIO_PORTD : DDRD_Register = Copy_u8Direction; break;
    14f6:	e1 e3       	ldi	r30, 0x31	; 49
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	80 83       	st	Z, r24
    14fe:	03 c0       	rjmp	.+6      	; 0x1506 <DIO_enumSetPortDirection+0x88>
		default        : LOC_enumState = DIO_NOK         ; break;
    1500:	19 82       	std	Y+1, r1	; 0x01
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <DIO_enumSetPortDirection+0x88>
		}
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
    1504:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 
    1506:	89 81       	ldd	r24, Y+1	; 0x01
}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <DIO_enumSetPortValue>:

DIO_ErrorStatus DIO_enumSetPortValue     (u8 Copy_u8Port, u8 Copy_u8Value    )
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	00 d0       	rcall	.+0      	; 0x151e <DIO_enumSetPortValue+0x6>
    151e:	00 d0       	rcall	.+0      	; 0x1520 <DIO_enumSetPortValue+0x8>
    1520:	0f 92       	push	r0
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	8a 83       	std	Y+2, r24	; 0x02
    1528:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	a8 f5       	brcc	.+106    	; 0x159e <DIO_enumSetPortValue+0x86>
	{
		switch (Copy_u8Port)
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	3d 83       	std	Y+5, r19	; 0x05
    153c:	2c 83       	std	Y+4, r18	; 0x04
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	9d 81       	ldd	r25, Y+5	; 0x05
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	91 05       	cpc	r25, r1
    1546:	d1 f0       	breq	.+52     	; 0x157c <DIO_enumSetPortValue+0x64>
    1548:	2c 81       	ldd	r18, Y+4	; 0x04
    154a:	3d 81       	ldd	r19, Y+5	; 0x05
    154c:	22 30       	cpi	r18, 0x02	; 2
    154e:	31 05       	cpc	r19, r1
    1550:	2c f4       	brge	.+10     	; 0x155c <DIO_enumSetPortValue+0x44>
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	9d 81       	ldd	r25, Y+5	; 0x05
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	61 f0       	breq	.+24     	; 0x1572 <DIO_enumSetPortValue+0x5a>
    155a:	1f c0       	rjmp	.+62     	; 0x159a <DIO_enumSetPortValue+0x82>
    155c:	2c 81       	ldd	r18, Y+4	; 0x04
    155e:	3d 81       	ldd	r19, Y+5	; 0x05
    1560:	22 30       	cpi	r18, 0x02	; 2
    1562:	31 05       	cpc	r19, r1
    1564:	81 f0       	breq	.+32     	; 0x1586 <DIO_enumSetPortValue+0x6e>
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
    1568:	9d 81       	ldd	r25, Y+5	; 0x05
    156a:	83 30       	cpi	r24, 0x03	; 3
    156c:	91 05       	cpc	r25, r1
    156e:	81 f0       	breq	.+32     	; 0x1590 <DIO_enumSetPortValue+0x78>
    1570:	14 c0       	rjmp	.+40     	; 0x159a <DIO_enumSetPortValue+0x82>
		{
		case DIO_PORTA : PORTA_Register = Copy_u8Value; break;
    1572:	eb e3       	ldi	r30, 0x3B	; 59
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	80 83       	st	Z, r24
    157a:	12 c0       	rjmp	.+36     	; 0x15a0 <DIO_enumSetPortValue+0x88>
		case DIO_PORTB : PORTB_Register = Copy_u8Value; break;
    157c:	e8 e3       	ldi	r30, 0x38	; 56
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	80 83       	st	Z, r24
    1584:	0d c0       	rjmp	.+26     	; 0x15a0 <DIO_enumSetPortValue+0x88>
		case DIO_PORTC : PORTC_Register = Copy_u8Value; break;
    1586:	e5 e3       	ldi	r30, 0x35	; 53
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	80 83       	st	Z, r24
    158e:	08 c0       	rjmp	.+16     	; 0x15a0 <DIO_enumSetPortValue+0x88>
		case DIO_PORTD : PORTD_Register = Copy_u8Value; break;
    1590:	e2 e3       	ldi	r30, 0x32	; 50
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	80 83       	st	Z, r24
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <DIO_enumSetPortValue+0x88>
		default        : LOC_enumState  = DIO_NOK          ; break;
    159a:	19 82       	std	Y+1, r1	; 0x01
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <DIO_enumSetPortValue+0x88>
		}
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
    159e:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState; 
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <DIO_enumGetPortValue>:

DIO_ErrorStatus DIO_enumGetPortValue     (u8 Copy_u8Port, u8 *Copy_u8PtrData )
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <DIO_enumGetPortValue+0x6>
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <DIO_enumGetPortValue+0x8>
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <DIO_enumGetPortValue+0xa>
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	8a 83       	std	Y+2, r24	; 0x02
    15c2:	7c 83       	std	Y+4, r23	; 0x04
    15c4:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	84 30       	cpi	r24, 0x04	; 4
    15ce:	e8 f5       	brcc	.+122    	; 0x164a <DIO_enumGetPortValue+0x98>
	{
		switch (Copy_u8Port)
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	3e 83       	std	Y+6, r19	; 0x06
    15d8:	2d 83       	std	Y+5, r18	; 0x05
    15da:	8d 81       	ldd	r24, Y+5	; 0x05
    15dc:	9e 81       	ldd	r25, Y+6	; 0x06
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	91 05       	cpc	r25, r1
    15e2:	e1 f0       	breq	.+56     	; 0x161c <DIO_enumGetPortValue+0x6a>
    15e4:	2d 81       	ldd	r18, Y+5	; 0x05
    15e6:	3e 81       	ldd	r19, Y+6	; 0x06
    15e8:	22 30       	cpi	r18, 0x02	; 2
    15ea:	31 05       	cpc	r19, r1
    15ec:	2c f4       	brge	.+10     	; 0x15f8 <DIO_enumGetPortValue+0x46>
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
    15f0:	9e 81       	ldd	r25, Y+6	; 0x06
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	61 f0       	breq	.+24     	; 0x160e <DIO_enumGetPortValue+0x5c>
    15f6:	27 c0       	rjmp	.+78     	; 0x1646 <DIO_enumGetPortValue+0x94>
    15f8:	2d 81       	ldd	r18, Y+5	; 0x05
    15fa:	3e 81       	ldd	r19, Y+6	; 0x06
    15fc:	22 30       	cpi	r18, 0x02	; 2
    15fe:	31 05       	cpc	r19, r1
    1600:	a1 f0       	breq	.+40     	; 0x162a <DIO_enumGetPortValue+0x78>
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	83 30       	cpi	r24, 0x03	; 3
    1608:	91 05       	cpc	r25, r1
    160a:	b1 f0       	breq	.+44     	; 0x1638 <DIO_enumGetPortValue+0x86>
    160c:	1c c0       	rjmp	.+56     	; 0x1646 <DIO_enumGetPortValue+0x94>
		{
		case DIO_PORTA : *Copy_u8PtrData = PINA_Register; break;
    160e:	e9 e3       	ldi	r30, 0x39	; 57
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	eb 81       	ldd	r30, Y+3	; 0x03
    1616:	fc 81       	ldd	r31, Y+4	; 0x04
    1618:	80 83       	st	Z, r24
    161a:	18 c0       	rjmp	.+48     	; 0x164c <DIO_enumGetPortValue+0x9a>
		case DIO_PORTB : *Copy_u8PtrData = PINB_Register; break;
    161c:	e6 e3       	ldi	r30, 0x36	; 54
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	eb 81       	ldd	r30, Y+3	; 0x03
    1624:	fc 81       	ldd	r31, Y+4	; 0x04
    1626:	80 83       	st	Z, r24
    1628:	11 c0       	rjmp	.+34     	; 0x164c <DIO_enumGetPortValue+0x9a>
		case DIO_PORTC : *Copy_u8PtrData = PINC_Register; break;
    162a:	e3 e3       	ldi	r30, 0x33	; 51
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	eb 81       	ldd	r30, Y+3	; 0x03
    1632:	fc 81       	ldd	r31, Y+4	; 0x04
    1634:	80 83       	st	Z, r24
    1636:	0a c0       	rjmp	.+20     	; 0x164c <DIO_enumGetPortValue+0x9a>
		case DIO_PORTD : *Copy_u8PtrData = PIND_Register; break;
    1638:	e0 e3       	ldi	r30, 0x30	; 48
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	eb 81       	ldd	r30, Y+3	; 0x03
    1640:	fc 81       	ldd	r31, Y+4	; 0x04
    1642:	80 83       	st	Z, r24
    1644:	03 c0       	rjmp	.+6      	; 0x164c <DIO_enumGetPortValue+0x9a>
		default        : LOC_enumState        = DIO_NOK      ; break;
    1646:	19 82       	std	Y+1, r1	; 0x01
    1648:	01 c0       	rjmp	.+2      	; 0x164c <DIO_enumGetPortValue+0x9a>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    164a:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState;
    164c:	89 81       	ldd	r24, Y+1	; 0x01
}
    164e:	26 96       	adiw	r28, 0x06	; 6
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <DIO_enumTogglePortValue>:

DIO_ErrorStatus DIO_enumTogglePortValue  (u8 Copy_u8Port                               )
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	00 d0       	rcall	.+0      	; 0x1666 <DIO_enumTogglePortValue+0x6>
    1666:	00 d0       	rcall	.+0      	; 0x1668 <DIO_enumTogglePortValue+0x8>
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	84 30       	cpi	r24, 0x04	; 4
    1676:	08 f0       	brcs	.+2      	; 0x167a <DIO_enumTogglePortValue+0x1a>
    1678:	41 c0       	rjmp	.+130    	; 0x16fc <DIO_enumTogglePortValue+0x9c>
	{
		switch (Copy_u8Port)
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	3c 83       	std	Y+4, r19	; 0x04
    1682:	2b 83       	std	Y+3, r18	; 0x03
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	91 05       	cpc	r25, r1
    168c:	e9 f0       	breq	.+58     	; 0x16c8 <DIO_enumTogglePortValue+0x68>
    168e:	2b 81       	ldd	r18, Y+3	; 0x03
    1690:	3c 81       	ldd	r19, Y+4	; 0x04
    1692:	22 30       	cpi	r18, 0x02	; 2
    1694:	31 05       	cpc	r19, r1
    1696:	2c f4       	brge	.+10     	; 0x16a2 <DIO_enumTogglePortValue+0x42>
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	61 f0       	breq	.+24     	; 0x16b8 <DIO_enumTogglePortValue+0x58>
    16a0:	2b c0       	rjmp	.+86     	; 0x16f8 <DIO_enumTogglePortValue+0x98>
    16a2:	2b 81       	ldd	r18, Y+3	; 0x03
    16a4:	3c 81       	ldd	r19, Y+4	; 0x04
    16a6:	22 30       	cpi	r18, 0x02	; 2
    16a8:	31 05       	cpc	r19, r1
    16aa:	b1 f0       	breq	.+44     	; 0x16d8 <DIO_enumTogglePortValue+0x78>
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	83 30       	cpi	r24, 0x03	; 3
    16b2:	91 05       	cpc	r25, r1
    16b4:	c9 f0       	breq	.+50     	; 0x16e8 <DIO_enumTogglePortValue+0x88>
    16b6:	20 c0       	rjmp	.+64     	; 0x16f8 <DIO_enumTogglePortValue+0x98>
		{
		case DIO_PORTA : PORTA_Register = ~ PORTA_Register; break;
    16b8:	ab e3       	ldi	r26, 0x3B	; 59
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	eb e3       	ldi	r30, 0x3B	; 59
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	80 95       	com	r24
    16c4:	8c 93       	st	X, r24
    16c6:	1b c0       	rjmp	.+54     	; 0x16fe <DIO_enumTogglePortValue+0x9e>
		case DIO_PORTB : PORTB_Register = ~ PORTB_Register; break;
    16c8:	a8 e3       	ldi	r26, 0x38	; 56
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e8 e3       	ldi	r30, 0x38	; 56
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	80 95       	com	r24
    16d4:	8c 93       	st	X, r24
    16d6:	13 c0       	rjmp	.+38     	; 0x16fe <DIO_enumTogglePortValue+0x9e>
		case DIO_PORTC : PORTC_Register = ~ PORTC_Register; break;
    16d8:	a5 e3       	ldi	r26, 0x35	; 53
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e5 e3       	ldi	r30, 0x35	; 53
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	80 95       	com	r24
    16e4:	8c 93       	st	X, r24
    16e6:	0b c0       	rjmp	.+22     	; 0x16fe <DIO_enumTogglePortValue+0x9e>
		case DIO_PORTD : PORTD_Register = ~ PORTD_Register; break;
    16e8:	a2 e3       	ldi	r26, 0x32	; 50
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e2 e3       	ldi	r30, 0x32	; 50
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	80 95       	com	r24
    16f4:	8c 93       	st	X, r24
    16f6:	03 c0       	rjmp	.+6      	; 0x16fe <DIO_enumTogglePortValue+0x9e>
		default        : LOC_enumState  = DIO_NOK         ; break;
    16f8:	19 82       	std	Y+1, r1	; 0x01
    16fa:	01 c0       	rjmp	.+2      	; 0x16fe <DIO_enumTogglePortValue+0x9e>
		}		
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
    16fc:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState;
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <DIO_enumWritHighNibbles>:

/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< IO NIBBLES <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/

DIO_ErrorStatus DIO_enumWritHighNibbles (u8 Copy_u8Port, u8 Copy_u8Value)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	00 d0       	rcall	.+0      	; 0x1714 <DIO_enumWritHighNibbles+0x6>
    1714:	00 d0       	rcall	.+0      	; 0x1716 <DIO_enumWritHighNibbles+0x8>
    1716:	0f 92       	push	r0
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	8a 83       	std	Y+2, r24	; 0x02
    171e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	84 30       	cpi	r24, 0x04	; 4
    1728:	08 f0       	brcs	.+2      	; 0x172c <DIO_enumWritHighNibbles+0x1e>
    172a:	65 c0       	rjmp	.+202    	; 0x17f6 <DIO_enumWritHighNibbles+0xe8>
	{
		Copy_u8Value <<= 4;
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	82 95       	swap	r24
    1730:	80 7f       	andi	r24, 0xF0	; 240
    1732:	8b 83       	std	Y+3, r24	; 0x03
		
		switch (Copy_u8Port)
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	3d 83       	std	Y+5, r19	; 0x05
    173c:	2c 83       	std	Y+4, r18	; 0x04
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	9d 81       	ldd	r25, Y+5	; 0x05
    1742:	81 30       	cpi	r24, 0x01	; 1
    1744:	91 05       	cpc	r25, r1
    1746:	29 f1       	breq	.+74     	; 0x1792 <DIO_enumWritHighNibbles+0x84>
    1748:	2c 81       	ldd	r18, Y+4	; 0x04
    174a:	3d 81       	ldd	r19, Y+5	; 0x05
    174c:	22 30       	cpi	r18, 0x02	; 2
    174e:	31 05       	cpc	r19, r1
    1750:	2c f4       	brge	.+10     	; 0x175c <DIO_enumWritHighNibbles+0x4e>
    1752:	8c 81       	ldd	r24, Y+4	; 0x04
    1754:	9d 81       	ldd	r25, Y+5	; 0x05
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	61 f0       	breq	.+24     	; 0x1772 <DIO_enumWritHighNibbles+0x64>
    175a:	4b c0       	rjmp	.+150    	; 0x17f2 <DIO_enumWritHighNibbles+0xe4>
    175c:	2c 81       	ldd	r18, Y+4	; 0x04
    175e:	3d 81       	ldd	r19, Y+5	; 0x05
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	31 f1       	breq	.+76     	; 0x17b2 <DIO_enumWritHighNibbles+0xa4>
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	9d 81       	ldd	r25, Y+5	; 0x05
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	91 05       	cpc	r25, r1
    176e:	89 f1       	breq	.+98     	; 0x17d2 <DIO_enumWritHighNibbles+0xc4>
    1770:	40 c0       	rjmp	.+128    	; 0x17f2 <DIO_enumWritHighNibbles+0xe4>
		{
		case DIO_PORTA : 
			PORTA_Register &= 0x0f;
    1772:	ab e3       	ldi	r26, 0x3B	; 59
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	eb e3       	ldi	r30, 0x3B	; 59
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	8f 70       	andi	r24, 0x0F	; 15
    177e:	8c 93       	st	X, r24
			PORTA_Register |= Copy_u8Value;
    1780:	ab e3       	ldi	r26, 0x3B	; 59
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	eb e3       	ldi	r30, 0x3B	; 59
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	90 81       	ld	r25, Z
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	89 2b       	or	r24, r25
    178e:	8c 93       	st	X, r24
    1790:	33 c0       	rjmp	.+102    	; 0x17f8 <DIO_enumWritHighNibbles+0xea>
		    break; 
		case DIO_PORTB :
		    PORTB_Register &= 0x0f;
    1792:	a8 e3       	ldi	r26, 0x38	; 56
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e8 e3       	ldi	r30, 0x38	; 56
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	8f 70       	andi	r24, 0x0F	; 15
    179e:	8c 93       	st	X, r24
			PORTB_Register |= Copy_u8Value;
    17a0:	a8 e3       	ldi	r26, 0x38	; 56
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e8 e3       	ldi	r30, 0x38	; 56
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	90 81       	ld	r25, Z
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	89 2b       	or	r24, r25
    17ae:	8c 93       	st	X, r24
    17b0:	23 c0       	rjmp	.+70     	; 0x17f8 <DIO_enumWritHighNibbles+0xea>
		    break; 
		case DIO_PORTC :
			PORTC_Register &= 0x0f;
    17b2:	a5 e3       	ldi	r26, 0x35	; 53
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e5 e3       	ldi	r30, 0x35	; 53
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	8f 70       	andi	r24, 0x0F	; 15
    17be:	8c 93       	st	X, r24
			PORTC_Register |= Copy_u8Value;
    17c0:	a5 e3       	ldi	r26, 0x35	; 53
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e5 e3       	ldi	r30, 0x35	; 53
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	90 81       	ld	r25, Z
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	89 2b       	or	r24, r25
    17ce:	8c 93       	st	X, r24
    17d0:	13 c0       	rjmp	.+38     	; 0x17f8 <DIO_enumWritHighNibbles+0xea>
		    break; 
		case DIO_PORTD :
			PORTD_Register &= 0x0f;
    17d2:	a2 e3       	ldi	r26, 0x32	; 50
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e2 e3       	ldi	r30, 0x32	; 50
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	8f 70       	andi	r24, 0x0F	; 15
    17de:	8c 93       	st	X, r24
			PORTD_Register |= Copy_u8Value;
    17e0:	a2 e3       	ldi	r26, 0x32	; 50
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e2 e3       	ldi	r30, 0x32	; 50
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	90 81       	ld	r25, Z
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	89 2b       	or	r24, r25
    17ee:	8c 93       	st	X, r24
    17f0:	03 c0       	rjmp	.+6      	; 0x17f8 <DIO_enumWritHighNibbles+0xea>
		    break; 
		default : LOC_enumState = DIO_NOK;
    17f2:	19 82       	std	Y+1, r1	; 0x01
    17f4:	01 c0       	rjmp	.+2      	; 0x17f8 <DIO_enumWritHighNibbles+0xea>
		}		
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
    17f6:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState;	
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <DIO_enumWritLowNibbles>:

DIO_ErrorStatus DIO_enumWritLowNibbles  (u8 Copy_u8Port, u8 Copy_u8Value)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	00 d0       	rcall	.+0      	; 0x1810 <DIO_enumWritLowNibbles+0x6>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <DIO_enumWritLowNibbles+0x8>
    1812:	0f 92       	push	r0
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	8a 83       	std	Y+2, r24	; 0x02
    181a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u8Port <= DIO_PORTD)
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	84 30       	cpi	r24, 0x04	; 4
    1824:	08 f0       	brcs	.+2      	; 0x1828 <DIO_enumWritLowNibbles+0x1e>
    1826:	61 c0       	rjmp	.+194    	; 0x18ea <DIO_enumWritLowNibbles+0xe0>
	{
		switch (Copy_u8Port)
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	3d 83       	std	Y+5, r19	; 0x05
    1830:	2c 83       	std	Y+4, r18	; 0x04
    1832:	8c 81       	ldd	r24, Y+4	; 0x04
    1834:	9d 81       	ldd	r25, Y+5	; 0x05
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	91 05       	cpc	r25, r1
    183a:	29 f1       	breq	.+74     	; 0x1886 <DIO_enumWritLowNibbles+0x7c>
    183c:	2c 81       	ldd	r18, Y+4	; 0x04
    183e:	3d 81       	ldd	r19, Y+5	; 0x05
    1840:	22 30       	cpi	r18, 0x02	; 2
    1842:	31 05       	cpc	r19, r1
    1844:	2c f4       	brge	.+10     	; 0x1850 <DIO_enumWritLowNibbles+0x46>
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
    1848:	9d 81       	ldd	r25, Y+5	; 0x05
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	61 f0       	breq	.+24     	; 0x1866 <DIO_enumWritLowNibbles+0x5c>
    184e:	4b c0       	rjmp	.+150    	; 0x18e6 <DIO_enumWritLowNibbles+0xdc>
    1850:	2c 81       	ldd	r18, Y+4	; 0x04
    1852:	3d 81       	ldd	r19, Y+5	; 0x05
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	31 f1       	breq	.+76     	; 0x18a6 <DIO_enumWritLowNibbles+0x9c>
    185a:	8c 81       	ldd	r24, Y+4	; 0x04
    185c:	9d 81       	ldd	r25, Y+5	; 0x05
    185e:	83 30       	cpi	r24, 0x03	; 3
    1860:	91 05       	cpc	r25, r1
    1862:	89 f1       	breq	.+98     	; 0x18c6 <DIO_enumWritLowNibbles+0xbc>
    1864:	40 c0       	rjmp	.+128    	; 0x18e6 <DIO_enumWritLowNibbles+0xdc>
		{
		case DIO_PORTA : 
			PORTA_Register &= 0xf0;
    1866:	ab e3       	ldi	r26, 0x3B	; 59
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	eb e3       	ldi	r30, 0x3B	; 59
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	80 7f       	andi	r24, 0xF0	; 240
    1872:	8c 93       	st	X, r24
			PORTA_Register |= Copy_u8Value;
    1874:	ab e3       	ldi	r26, 0x3B	; 59
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	eb e3       	ldi	r30, 0x3B	; 59
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	90 81       	ld	r25, Z
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	89 2b       	or	r24, r25
    1882:	8c 93       	st	X, r24
    1884:	33 c0       	rjmp	.+102    	; 0x18ec <DIO_enumWritLowNibbles+0xe2>
		    break; 
		case DIO_PORTB :
			PORTB_Register &= 0xf0;
    1886:	a8 e3       	ldi	r26, 0x38	; 56
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e8 e3       	ldi	r30, 0x38	; 56
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	80 7f       	andi	r24, 0xF0	; 240
    1892:	8c 93       	st	X, r24
			PORTB_Register |= Copy_u8Value;
    1894:	a8 e3       	ldi	r26, 0x38	; 56
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e8 e3       	ldi	r30, 0x38	; 56
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	90 81       	ld	r25, Z
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	89 2b       	or	r24, r25
    18a2:	8c 93       	st	X, r24
    18a4:	23 c0       	rjmp	.+70     	; 0x18ec <DIO_enumWritLowNibbles+0xe2>
		    break; 
		case DIO_PORTC :
			PORTC_Register &= 0xf0;
    18a6:	a5 e3       	ldi	r26, 0x35	; 53
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e5 e3       	ldi	r30, 0x35	; 53
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	80 7f       	andi	r24, 0xF0	; 240
    18b2:	8c 93       	st	X, r24
			PORTC_Register |= Copy_u8Value;
    18b4:	a5 e3       	ldi	r26, 0x35	; 53
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e5 e3       	ldi	r30, 0x35	; 53
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	90 81       	ld	r25, Z
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	89 2b       	or	r24, r25
    18c2:	8c 93       	st	X, r24
    18c4:	13 c0       	rjmp	.+38     	; 0x18ec <DIO_enumWritLowNibbles+0xe2>
		    break; 
		case DIO_PORTD :
			PORTD_Register &= 0xf0;
    18c6:	a2 e3       	ldi	r26, 0x32	; 50
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e2 e3       	ldi	r30, 0x32	; 50
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	80 7f       	andi	r24, 0xF0	; 240
    18d2:	8c 93       	st	X, r24
			PORTD_Register |= Copy_u8Value;
    18d4:	a2 e3       	ldi	r26, 0x32	; 50
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e2 e3       	ldi	r30, 0x32	; 50
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	90 81       	ld	r25, Z
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	89 2b       	or	r24, r25
    18e2:	8c 93       	st	X, r24
    18e4:	03 c0       	rjmp	.+6      	; 0x18ec <DIO_enumWritLowNibbles+0xe2>
		    break; 
		default : LOC_enumState = DIO_NOK;
    18e6:	19 82       	std	Y+1, r1	; 0x01
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <DIO_enumWritLowNibbles+0xe2>
		}		
	}
	
	else
	{
		LOC_enumState = DIO_NOK;
    18ea:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return LOC_enumState;	
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <LED_voidInit>:
#include "LED_interface.h"

#include "LED_private.h"

void LED_voidInit   (LED_Type_t Copy_structLedConfig)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	00 d0       	rcall	.+0      	; 0x1904 <LED_voidInit+0x6>
    1904:	0f 92       	push	r0
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	69 83       	std	Y+1, r22	; 0x01
    190c:	7a 83       	std	Y+2, r23	; 0x02
    190e:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection (Copy_structLedConfig.Port, Copy_structLedConfig.Pin, DIO_PIN_OUTPUT);
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	69 2f       	mov	r22, r25
    1916:	41 e0       	ldi	r20, 0x01	; 1
    1918:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_enumSetPinDirection>
}
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <LED_voidOn>:

void LED_voidOn     (LED_Type_t Copy_structLedConfig)
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	00 d0       	rcall	.+0      	; 0x192e <LED_voidOn+0x6>
    192e:	0f 92       	push	r0
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	69 83       	std	Y+1, r22	; 0x01
    1936:	7a 83       	std	Y+2, r23	; 0x02
    1938:	8b 83       	std	Y+3, r24	; 0x03
	if (Copy_structLedConfig.Active_State == ACTIVE_HIGH)
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	81 30       	cpi	r24, 0x01	; 1
    193e:	39 f4       	brne	.+14     	; 0x194e <LED_voidOn+0x26>
	{
		DIO_enumSetPinValue (Copy_structLedConfig.Port, Copy_structLedConfig.Pin, DIO_PIN_HIGH);
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	69 2f       	mov	r22, r25
    1946:	41 e0       	ldi	r20, 0x01	; 1
    1948:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>
    194c:	09 c0       	rjmp	.+18     	; 0x1960 <LED_voidOn+0x38>
	}
	
	else if (Copy_structLedConfig.Active_State == ACTIVE_LOW)
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	88 23       	and	r24, r24
    1952:	31 f4       	brne	.+12     	; 0x1960 <LED_voidOn+0x38>
	{
		DIO_enumSetPinValue (Copy_structLedConfig.Port, Copy_structLedConfig.Pin, DIO_PIN_LOW);
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	9a 81       	ldd	r25, Y+2	; 0x02
    1958:	69 2f       	mov	r22, r25
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>
	}
}
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <LED_voidOff>:

void LED_voidOff    (LED_Type_t Copy_structLedConfig)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	00 d0       	rcall	.+0      	; 0x1972 <LED_voidOff+0x6>
    1972:	0f 92       	push	r0
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	69 83       	std	Y+1, r22	; 0x01
    197a:	7a 83       	std	Y+2, r23	; 0x02
    197c:	8b 83       	std	Y+3, r24	; 0x03
	if (Copy_structLedConfig.Active_State == ACTIVE_HIGH)
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	39 f4       	brne	.+14     	; 0x1992 <LED_voidOff+0x26>
	{
		DIO_enumSetPinValue (Copy_structLedConfig.Port, Copy_structLedConfig.Pin, DIO_PIN_LOW);
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	9a 81       	ldd	r25, Y+2	; 0x02
    1988:	69 2f       	mov	r22, r25
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>
    1990:	09 c0       	rjmp	.+18     	; 0x19a4 <LED_voidOff+0x38>
	}
	
	else if (Copy_structLedConfig.Active_State == ACTIVE_LOW)
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	88 23       	and	r24, r24
    1996:	31 f4       	brne	.+12     	; 0x19a4 <LED_voidOff+0x38>
	{
		DIO_enumSetPinValue (Copy_structLedConfig.Port, Copy_structLedConfig.Pin, DIO_PIN_HIGH);
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	9a 81       	ldd	r25, Y+2	; 0x02
    199c:	69 2f       	mov	r22, r25
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>
	}	
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <LED_voidToggle>:

void LED_voidToggle (LED_Type_t Copy_structLedConfig)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <LED_voidToggle+0x6>
    19b6:	0f 92       	push	r0
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	69 83       	std	Y+1, r22	; 0x01
    19be:	7a 83       	std	Y+2, r23	; 0x02
    19c0:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue (Copy_structLedConfig.Port, Copy_structLedConfig.Pin);
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	69 2f       	mov	r22, r25
    19c8:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enumTogglePinValue>
}
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <SSD_voidInitialDataPort>:
 * Parameters :
            =>Copy_u8PORT --> Port Name [ SSD_PORTA ,	SSD_PORTB , SSD_PORTC , SSD_PORTD ]
 * return : void
 */
void SSD_voidInitialDataPort  (SSD_Type Copy_structConfig )
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	00 d0       	rcall	.+0      	; 0x19de <SSD_voidInitialDataPort+0x6>
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <SSD_voidInitialDataPort+0x8>
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	69 83       	std	Y+1, r22	; 0x01
    19e6:	7a 83       	std	Y+2, r23	; 0x02
    19e8:	8b 83       	std	Y+3, r24	; 0x03
    19ea:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPortDirection    ( Copy_structConfig.DataPort , 0xFF );
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	6f ef       	ldi	r22, 0xFF	; 255
    19f0:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_enumSetPortDirection>
}
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <SSD_voidSendNumber>:
/*
 * Breif : This Function write Number on 7 seg [ 0 : 9 ]
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidSendNumber( SSD_Type Copy_structConfig , u8 Copy_u8Number ){
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <SSD_voidSendNumber+0x6>
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <SSD_voidSendNumber+0x8>
    1a0a:	0f 92       	push	r0
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	69 83       	std	Y+1, r22	; 0x01
    1a12:	7a 83       	std	Y+2, r23	; 0x02
    1a14:	8b 83       	std	Y+3, r24	; 0x03
    1a16:	9c 83       	std	Y+4, r25	; 0x04
    1a18:	4d 83       	std	Y+5, r20	; 0x05

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	88 23       	and	r24, r24
    1a1e:	69 f4       	brne	.+26     	; 0x1a3a <SSD_voidSendNumber+0x38>

		DIO_enumSetPortValue( Copy_structConfig.DataPort , Local_u8SSDNumbers[ Copy_u8Number ] );
    1a20:	2a 81       	ldd	r18, Y+2	; 0x02
    1a22:	8d 81       	ldd	r24, Y+5	; 0x05
    1a24:	88 2f       	mov	r24, r24
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	fc 01       	movw	r30, r24
    1a2a:	e8 59       	subi	r30, 0x98	; 152
    1a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a2e:	90 81       	ld	r25, Z
    1a30:	82 2f       	mov	r24, r18
    1a32:	69 2f       	mov	r22, r25
    1a34:	0e 94 8c 0a 	call	0x1518	; 0x1518 <DIO_enumSetPortValue>
    1a38:	11 c0       	rjmp	.+34     	; 0x1a5c <SSD_voidSendNumber+0x5a>

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	71 f4       	brne	.+28     	; 0x1a5c <SSD_voidSendNumber+0x5a>

		DIO_enumSetPortValue( Copy_structConfig.DataPort , ~( Local_u8SSDNumbers[ Copy_u8Number ] ) );
    1a40:	2a 81       	ldd	r18, Y+2	; 0x02
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	88 2f       	mov	r24, r24
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	fc 01       	movw	r30, r24
    1a4a:	e8 59       	subi	r30, 0x98	; 152
    1a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4e:	80 81       	ld	r24, Z
    1a50:	98 2f       	mov	r25, r24
    1a52:	90 95       	com	r25
    1a54:	82 2f       	mov	r24, r18
    1a56:	69 2f       	mov	r22, r25
    1a58:	0e 94 8c 0a 	call	0x1518	; 0x1518 <DIO_enumSetPortValue>

	}

}
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <SSD_voidEnable>:
/*
 * Breif : This Function enable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidEnable    ( SSD_Type Copy_structConfig ){
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <SSD_voidEnable+0x6>
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <SSD_voidEnable+0x8>
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	69 83       	std	Y+1, r22	; 0x01
    1a7a:	7a 83       	std	Y+2, r23	; 0x02
    1a7c:	8b 83       	std	Y+3, r24	; 0x03
    1a7e:	9c 83       	std	Y+4, r25	; 0x04

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	88 23       	and	r24, r24
    1a84:	69 f4       	brne	.+26     	; 0x1aa0 <SSD_voidEnable+0x34>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_OUTPUT );
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	69 2f       	mov	r22, r25
    1a8c:	41 e0       	ldi	r20, 0x01	; 1
    1a8e:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	9c 81       	ldd	r25, Y+4	; 0x04
    1a96:	69 2f       	mov	r22, r25
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>
    1a9e:	0f c0       	rjmp	.+30     	; 0x1abe <SSD_voidEnable+0x52>

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	61 f4       	brne	.+24     	; 0x1abe <SSD_voidEnable+0x52>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_OUTPUT );
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aaa:	69 2f       	mov	r22, r25
    1aac:	41 e0       	ldi	r20, 0x01	; 1
    1aae:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin ,DIO_PIN_HIGH );
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	69 2f       	mov	r22, r25
    1ab8:	41 e0       	ldi	r20, 0x01	; 1
    1aba:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>

	}

}
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <SSD_voidDisable>:
/*
 * Breif : This Function disable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidDisable   ( SSD_Type Copy_structConfig ){
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <SSD_voidDisable+0x6>
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <SSD_voidDisable+0x8>
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	69 83       	std	Y+1, r22	; 0x01
    1ada:	7a 83       	std	Y+2, r23	; 0x02
    1adc:	8b 83       	std	Y+3, r24	; 0x03
    1ade:	9c 83       	std	Y+4, r25	; 0x04

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	88 23       	and	r24, r24
    1ae4:	69 f4       	brne	.+26     	; 0x1b00 <SSD_voidDisable+0x34>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_OUTPUT );
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	69 2f       	mov	r22, r25
    1aec:	41 e0       	ldi	r20, 0x01	; 1
    1aee:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	9c 81       	ldd	r25, Y+4	; 0x04
    1af6:	69 2f       	mov	r22, r25
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <SSD_voidDisable+0x52>

	}
	else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	61 f4       	brne	.+24     	; 0x1b1e <SSD_voidDisable+0x52>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_OUTPUT );
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	69 2f       	mov	r22, r25
    1b0c:	41 e0       	ldi	r20, 0x01	; 1
    1b0e:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	69 2f       	mov	r22, r25
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>

	}

}
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <SSD_voidMakeAnimation>:
//----------------------------------------------------------------------------------------------------------------------------
void SSD_voidMakeAnimation (SSD_Type Copy_structConfig, u8 Copy_u8Number, u8 Copy_u8Time_ms)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	a4 97       	sbiw	r28, 0x24	; 36
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	6f 8f       	std	Y+31, r22	; 0x1f
    1b42:	78 a3       	std	Y+32, r23	; 0x20
    1b44:	89 a3       	std	Y+33, r24	; 0x21
    1b46:	9a a3       	std	Y+34, r25	; 0x22
    1b48:	4b a3       	std	Y+35, r20	; 0x23
    1b4a:	2c a3       	std	Y+36, r18	; 0x24
	if (Copy_structConfig.Type == SSD_COMMON_CATHODE)
    1b4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b4e:	88 23       	and	r24, r24
    1b50:	09 f0       	breq	.+2      	; 0x1b54 <SSD_voidMakeAnimation+0x28>
    1b52:	a9 c0       	rjmp	.+338    	; 0x1ca6 <SSD_voidMakeAnimation+0x17a>
	{
		DIO_enumSetPortValue     (Copy_structConfig.EnablePort, DIO_PORT_LOW);
    1b54:	89 a1       	ldd	r24, Y+33	; 0x21
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	0e 94 8c 0a 	call	0x1518	; 0x1518 <DIO_enumSetPortValue>

		for (u8 i = 0; i < 8; ++i) {
    1b5c:	1e 8e       	std	Y+30, r1	; 0x1e
    1b5e:	9e c0       	rjmp	.+316    	; 0x1c9c <SSD_voidMakeAnimation+0x170>
			if (Local_u8SSDNumbers[Copy_u8Number] & (1 << i)) {
    1b60:	8b a1       	ldd	r24, Y+35	; 0x23
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	fc 01       	movw	r30, r24
    1b68:	e8 59       	subi	r30, 0x98	; 152
    1b6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b6c:	80 81       	ld	r24, Z
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b74:	88 2f       	mov	r24, r24
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	a9 01       	movw	r20, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <SSD_voidMakeAnimation+0x54>
    1b7c:	55 95       	asr	r21
    1b7e:	47 95       	ror	r20
    1b80:	8a 95       	dec	r24
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <SSD_voidMakeAnimation+0x50>
    1b84:	ca 01       	movw	r24, r20
    1b86:	81 70       	andi	r24, 0x01	; 1
    1b88:	90 70       	andi	r25, 0x00	; 0
    1b8a:	88 23       	and	r24, r24
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <SSD_voidMakeAnimation+0x64>
    1b8e:	83 c0       	rjmp	.+262    	; 0x1c96 <SSD_voidMakeAnimation+0x16a>
				DIO_enumSetPinValue (Copy_structConfig.EnablePort, i, DIO_PIN_HIGH);
    1b90:	89 a1       	ldd	r24, Y+33	; 0x21
    1b92:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1b94:	41 e0       	ldi	r20, 0x01	; 1
    1b96:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>
				_delay_ms(Copy_u8Time_ms)                                                    ;
    1b9a:	8c a1       	ldd	r24, Y+36	; 0x24
    1b9c:	88 2f       	mov	r24, r24
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	89 8f       	std	Y+25, r24	; 0x19
    1bb2:	9a 8f       	std	Y+26, r25	; 0x1a
    1bb4:	ab 8f       	std	Y+27, r26	; 0x1b
    1bb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4a ef       	ldi	r20, 0xFA	; 250
    1bc6:	54 e4       	ldi	r21, 0x44	; 68
    1bc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	8d 8b       	std	Y+21, r24	; 0x15
    1bd2:	9e 8b       	std	Y+22, r25	; 0x16
    1bd4:	af 8b       	std	Y+23, r26	; 0x17
    1bd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bda:	7e 89       	ldd	r23, Y+22	; 0x16
    1bdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bde:	98 8d       	ldd	r25, Y+24	; 0x18
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bec:	88 23       	and	r24, r24
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <SSD_voidMakeAnimation+0xce>
		__ticks = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9c 8b       	std	Y+20, r25	; 0x14
    1bf6:	8b 8b       	std	Y+19, r24	; 0x13
    1bf8:	3f c0       	rjmp	.+126    	; 0x1c78 <SSD_voidMakeAnimation+0x14c>
	else if (__tmp > 65535)
    1bfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1bfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1c00:	98 8d       	ldd	r25, Y+24	; 0x18
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	3f ef       	ldi	r19, 0xFF	; 255
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	57 e4       	ldi	r21, 0x47	; 71
    1c0a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	4c f5       	brge	.+82     	; 0x1c64 <SSD_voidMakeAnimation+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c12:	69 8d       	ldd	r22, Y+25	; 0x19
    1c14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e2       	ldi	r20, 0x20	; 32
    1c20:	51 e4       	ldi	r21, 0x41	; 65
    1c22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	9c 8b       	std	Y+20, r25	; 0x14
    1c38:	8b 8b       	std	Y+19, r24	; 0x13
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <SSD_voidMakeAnimation+0x12e>
    1c3c:	88 ec       	ldi	r24, 0xC8	; 200
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9a 8b       	std	Y+18, r25	; 0x12
    1c42:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c44:	89 89       	ldd	r24, Y+17	; 0x11
    1c46:	9a 89       	ldd	r25, Y+18	; 0x12
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <SSD_voidMakeAnimation+0x11c>
    1c4c:	9a 8b       	std	Y+18, r25	; 0x12
    1c4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c50:	8b 89       	ldd	r24, Y+19	; 0x13
    1c52:	9c 89       	ldd	r25, Y+20	; 0x14
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	9c 8b       	std	Y+20, r25	; 0x14
    1c58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	69 f7       	brne	.-38     	; 0x1c3c <SSD_voidMakeAnimation+0x110>
    1c62:	14 c0       	rjmp	.+40     	; 0x1c8c <SSD_voidMakeAnimation+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c64:	6d 89       	ldd	r22, Y+21	; 0x15
    1c66:	7e 89       	ldd	r23, Y+22	; 0x16
    1c68:	8f 89       	ldd	r24, Y+23	; 0x17
    1c6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9c 8b       	std	Y+20, r25	; 0x14
    1c76:	8b 8b       	std	Y+19, r24	; 0x13
    1c78:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c7c:	98 8b       	std	Y+16, r25	; 0x10
    1c7e:	8f 87       	std	Y+15, r24	; 0x0f
    1c80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c82:	98 89       	ldd	r25, Y+16	; 0x10
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <SSD_voidMakeAnimation+0x158>
    1c88:	98 8b       	std	Y+16, r25	; 0x10
    1c8a:	8f 87       	std	Y+15, r24	; 0x0f
				DIO_enumSetPinValue (Copy_structConfig.EnablePort, i, DIO_PIN_LOW) ;
    1c8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c8e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>
{
	if (Copy_structConfig.Type == SSD_COMMON_CATHODE)
	{
		DIO_enumSetPortValue     (Copy_structConfig.EnablePort, DIO_PORT_LOW);

		for (u8 i = 0; i < 8; ++i) {
    1c96:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c98:	8f 5f       	subi	r24, 0xFF	; 255
    1c9a:	8e 8f       	std	Y+30, r24	; 0x1e
    1c9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c9e:	88 30       	cpi	r24, 0x08	; 8
    1ca0:	08 f4       	brcc	.+2      	; 0x1ca4 <SSD_voidMakeAnimation+0x178>
    1ca2:	5e cf       	rjmp	.-324    	; 0x1b60 <SSD_voidMakeAnimation+0x34>
    1ca4:	ac c0       	rjmp	.+344    	; 0x1dfe <SSD_voidMakeAnimation+0x2d2>
				DIO_enumSetPinValue (Copy_structConfig.EnablePort, i, DIO_PIN_LOW) ;
			}
		}
	}

	else if (Copy_structConfig.Type == SSD_COMMON_ANODE)
    1ca6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	09 f0       	breq	.+2      	; 0x1cae <SSD_voidMakeAnimation+0x182>
    1cac:	a8 c0       	rjmp	.+336    	; 0x1dfe <SSD_voidMakeAnimation+0x2d2>
	{
		DIO_enumSetPortValue     (Copy_structConfig.EnablePort, DIO_PORT_HIGH);
    1cae:	89 a1       	ldd	r24, Y+33	; 0x21
    1cb0:	6f ef       	ldi	r22, 0xFF	; 255
    1cb2:	0e 94 8c 0a 	call	0x1518	; 0x1518 <DIO_enumSetPortValue>

		for (u8 i = 0; i < 8; ++i) {
    1cb6:	1d 8e       	std	Y+29, r1	; 0x1d
    1cb8:	9e c0       	rjmp	.+316    	; 0x1df6 <SSD_voidMakeAnimation+0x2ca>
			if (Local_u8SSDNumbers[Copy_u8Number] & (1 << i)) {
    1cba:	8b a1       	ldd	r24, Y+35	; 0x23
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	e8 59       	subi	r30, 0x98	; 152
    1cc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc6:	80 81       	ld	r24, Z
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	a9 01       	movw	r20, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <SSD_voidMakeAnimation+0x1ae>
    1cd6:	55 95       	asr	r21
    1cd8:	47 95       	ror	r20
    1cda:	8a 95       	dec	r24
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <SSD_voidMakeAnimation+0x1aa>
    1cde:	ca 01       	movw	r24, r20
    1ce0:	81 70       	andi	r24, 0x01	; 1
    1ce2:	90 70       	andi	r25, 0x00	; 0
    1ce4:	88 23       	and	r24, r24
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <SSD_voidMakeAnimation+0x1be>
    1ce8:	83 c0       	rjmp	.+262    	; 0x1df0 <SSD_voidMakeAnimation+0x2c4>
				DIO_enumSetPinValue (Copy_structConfig.EnablePort, i, DIO_PIN_LOW);
    1cea:	89 a1       	ldd	r24, Y+33	; 0x21
    1cec:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>
				_delay_ms(Copy_u8Time_ms);                                                   ;
    1cf4:	8c a1       	ldd	r24, Y+36	; 0x24
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	a0 e0       	ldi	r26, 0x00	; 0
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	8b 87       	std	Y+11, r24	; 0x0b
    1d0c:	9c 87       	std	Y+12, r25	; 0x0c
    1d0e:	ad 87       	std	Y+13, r26	; 0x0d
    1d10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	4a ef       	ldi	r20, 0xFA	; 250
    1d20:	54 e4       	ldi	r21, 0x44	; 68
    1d22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	8f 83       	std	Y+7, r24	; 0x07
    1d2c:	98 87       	std	Y+8, r25	; 0x08
    1d2e:	a9 87       	std	Y+9, r26	; 0x09
    1d30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d32:	6f 81       	ldd	r22, Y+7	; 0x07
    1d34:	78 85       	ldd	r23, Y+8	; 0x08
    1d36:	89 85       	ldd	r24, Y+9	; 0x09
    1d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e8       	ldi	r20, 0x80	; 128
    1d40:	5f e3       	ldi	r21, 0x3F	; 63
    1d42:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d46:	88 23       	and	r24, r24
    1d48:	2c f4       	brge	.+10     	; 0x1d54 <SSD_voidMakeAnimation+0x228>
		__ticks = 1;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	9e 83       	std	Y+6, r25	; 0x06
    1d50:	8d 83       	std	Y+5, r24	; 0x05
    1d52:	3f c0       	rjmp	.+126    	; 0x1dd2 <SSD_voidMakeAnimation+0x2a6>
	else if (__tmp > 65535)
    1d54:	6f 81       	ldd	r22, Y+7	; 0x07
    1d56:	78 85       	ldd	r23, Y+8	; 0x08
    1d58:	89 85       	ldd	r24, Y+9	; 0x09
    1d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	3f ef       	ldi	r19, 0xFF	; 255
    1d60:	4f e7       	ldi	r20, 0x7F	; 127
    1d62:	57 e4       	ldi	r21, 0x47	; 71
    1d64:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d68:	18 16       	cp	r1, r24
    1d6a:	4c f5       	brge	.+82     	; 0x1dbe <SSD_voidMakeAnimation+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e2       	ldi	r20, 0x20	; 32
    1d7a:	51 e4       	ldi	r21, 0x41	; 65
    1d7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9e 83       	std	Y+6, r25	; 0x06
    1d92:	8d 83       	std	Y+5, r24	; 0x05
    1d94:	0f c0       	rjmp	.+30     	; 0x1db4 <SSD_voidMakeAnimation+0x288>
    1d96:	88 ec       	ldi	r24, 0xC8	; 200
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	9c 83       	std	Y+4, r25	; 0x04
    1d9c:	8b 83       	std	Y+3, r24	; 0x03
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <SSD_voidMakeAnimation+0x276>
    1da6:	9c 83       	std	Y+4, r25	; 0x04
    1da8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	9e 81       	ldd	r25, Y+6	; 0x06
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	69 f7       	brne	.-38     	; 0x1d96 <SSD_voidMakeAnimation+0x26a>
    1dbc:	14 c0       	rjmp	.+40     	; 0x1de6 <SSD_voidMakeAnimation+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc0:	78 85       	ldd	r23, Y+8	; 0x08
    1dc2:	89 85       	ldd	r24, Y+9	; 0x09
    1dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
    1dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <SSD_voidMakeAnimation+0x2b2>
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01
				DIO_enumSetPinValue (Copy_structConfig.EnablePort, i, DIO_PIN_HIGH) ;
    1de6:	89 a1       	ldd	r24, Y+33	; 0x21
    1de8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_enumSetPinValue>

	else if (Copy_structConfig.Type == SSD_COMMON_ANODE)
	{
		DIO_enumSetPortValue     (Copy_structConfig.EnablePort, DIO_PORT_HIGH);

		for (u8 i = 0; i < 8; ++i) {
    1df0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df2:	8f 5f       	subi	r24, 0xFF	; 255
    1df4:	8d 8f       	std	Y+29, r24	; 0x1d
    1df6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df8:	88 30       	cpi	r24, 0x08	; 8
    1dfa:	08 f4       	brcc	.+2      	; 0x1dfe <SSD_voidMakeAnimation+0x2d2>
    1dfc:	5e cf       	rjmp	.-324    	; 0x1cba <SSD_voidMakeAnimation+0x18e>
				DIO_enumSetPinValue (Copy_structConfig.EnablePort, i, DIO_PIN_HIGH) ;
			}
		}
	}

}
    1dfe:	a4 96       	adiw	r28, 0x24	; 36
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	de bf       	out	0x3e, r29	; 62
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	cd bf       	out	0x3d, r28	; 61
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <main>:
SSD_Type SSD1 = {SSD_COMMON_CATHODE, SSD_PORTC, SSD_PORTC, SSD_PIN7};
BUZ_Type BUZ1 = {LED_PORTD, LED_PIN0, ACTIVE_HIGH}                  ;
LED_Type_t RED_led ={LED_PORTD, LED_PIN1, ACTIVE_HIGH};

void main()
{
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	ad 97       	sbiw	r28, 0x2d	; 45
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
	SSD_voidInitialDataPort   (SSD1);
    1e24:	80 91 8a 01 	lds	r24, 0x018A
    1e28:	90 91 8b 01 	lds	r25, 0x018B
    1e2c:	a0 91 8c 01 	lds	r26, 0x018C
    1e30:	b0 91 8d 01 	lds	r27, 0x018D
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <SSD_voidInitialDataPort>
	SSD_voidEnable         (SSD1);
    1e3c:	80 91 8a 01 	lds	r24, 0x018A
    1e40:	90 91 8b 01 	lds	r25, 0x018B
    1e44:	a0 91 8c 01 	lds	r26, 0x018C
    1e48:	b0 91 8d 01 	lds	r27, 0x018D
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	cd 01       	movw	r24, r26
    1e50:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <SSD_voidEnable>
	BUZ_voidInit           (BUZ1);
    1e54:	60 91 8e 01 	lds	r22, 0x018E
    1e58:	70 91 8f 01 	lds	r23, 0x018F
    1e5c:	80 91 90 01 	lds	r24, 0x0190
    1e60:	0e 94 63 06 	call	0xcc6	; 0xcc6 <BUZ_voidInit>
	LED_voidInit            (RED_led);
    1e64:	60 91 91 01 	lds	r22, 0x0191
    1e68:	70 91 92 01 	lds	r23, 0x0192
    1e6c:	80 91 93 01 	lds	r24, 0x0193
    1e70:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LED_voidInit>
    LOOP(NUM_OF_LEDS) {
    1e74:	1d a6       	std	Y+45, r1	; 0x2d
    1e76:	13 c0       	rjmp	.+38     	; 0x1e9e <main+0x8e>
    	LED_voidInit   (Leds[i]);
    1e78:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	c9 01       	movw	r24, r18
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	82 0f       	add	r24, r18
    1e86:	93 1f       	adc	r25, r19
    1e88:	fc 01       	movw	r30, r24
    1e8a:	ee 58       	subi	r30, 0x8E	; 142
    1e8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e8e:	60 81       	ld	r22, Z
    1e90:	71 81       	ldd	r23, Z+1	; 0x01
    1e92:	82 81       	ldd	r24, Z+2	; 0x02
    1e94:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LED_voidInit>
{
	SSD_voidInitialDataPort   (SSD1);
	SSD_voidEnable         (SSD1);
	BUZ_voidInit           (BUZ1);
	LED_voidInit            (RED_led);
    LOOP(NUM_OF_LEDS) {
    1e98:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e9a:	8f 5f       	subi	r24, 0xFF	; 255
    1e9c:	8d a7       	std	Y+45, r24	; 0x2d
    1e9e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ea0:	88 30       	cpi	r24, 0x08	; 8
    1ea2:	50 f3       	brcs	.-44     	; 0x1e78 <main+0x68>
    	LED_voidInit   (Leds[i]);
    }

    while (1)
    {
    	LOOP(NUM_OF_LEDS + 1) {
    1ea4:	1c a6       	std	Y+44, r1	; 0x2c
    1ea6:	41 c1       	rjmp	.+642    	; 0x212a <main+0x31a>
    		LED_voidOff     (RED_led);
    1ea8:	60 91 91 01 	lds	r22, 0x0191
    1eac:	70 91 92 01 	lds	r23, 0x0192
    1eb0:	80 91 93 01 	lds	r24, 0x0193
    1eb4:	0e 94 b6 0c 	call	0x196c	; 0x196c <LED_voidOff>

    		if (i == 0) {
    1eb8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1eba:	88 23       	and	r24, r24
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <main+0xb0>
    1ebe:	a0 c0       	rjmp	.+320    	; 0x2000 <main+0x1f0>
			LOOP(8) {
    1ec0:	1b a6       	std	Y+43, r1	; 0x2b
    1ec2:	13 c0       	rjmp	.+38     	; 0x1eea <main+0xda>
				LED_voidOff   (Leds[i]);
    1ec4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	c9 01       	movw	r24, r18
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	82 0f       	add	r24, r18
    1ed2:	93 1f       	adc	r25, r19
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	ee 58       	subi	r30, 0x8E	; 142
    1ed8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eda:	60 81       	ld	r22, Z
    1edc:	71 81       	ldd	r23, Z+1	; 0x01
    1ede:	82 81       	ldd	r24, Z+2	; 0x02
    1ee0:	0e 94 b6 0c 	call	0x196c	; 0x196c <LED_voidOff>
    {
    	LOOP(NUM_OF_LEDS + 1) {
    		LED_voidOff     (RED_led);

    		if (i == 0) {
			LOOP(8) {
    1ee4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee6:	8f 5f       	subi	r24, 0xFF	; 255
    1ee8:	8b a7       	std	Y+43, r24	; 0x2b
    1eea:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eec:	88 30       	cpi	r24, 0x08	; 8
    1eee:	50 f3       	brcs	.-44     	; 0x1ec4 <main+0xb4>
				LED_voidOff   (Leds[i]);
    	                }

    			BUZ_voidOff            (BUZ1);
    1ef0:	60 91 8e 01 	lds	r22, 0x018E
    1ef4:	70 91 8f 01 	lds	r23, 0x018F
    1ef8:	80 91 90 01 	lds	r24, 0x0190
    1efc:	0e 94 9a 06 	call	0xd34	; 0xd34 <BUZ_voidOff>
    			SSD_voidSendNumber     (SSD1, i);
    1f00:	80 91 8a 01 	lds	r24, 0x018A
    1f04:	90 91 8b 01 	lds	r25, 0x018B
    1f08:	a0 91 8c 01 	lds	r26, 0x018C
    1f0c:	b0 91 8d 01 	lds	r27, 0x018D
    1f10:	bc 01       	movw	r22, r24
    1f12:	cd 01       	movw	r24, r26
    1f14:	4c a5       	ldd	r20, Y+44	; 0x2c
    1f16:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <SSD_voidSendNumber>
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	aa e7       	ldi	r26, 0x7A	; 122
    1f20:	b4 e4       	ldi	r27, 0x44	; 68
    1f22:	8f a3       	std	Y+39, r24	; 0x27
    1f24:	98 a7       	std	Y+40, r25	; 0x28
    1f26:	a9 a7       	std	Y+41, r26	; 0x29
    1f28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f2c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f2e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f30:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4a ef       	ldi	r20, 0xFA	; 250
    1f38:	54 e4       	ldi	r21, 0x44	; 68
    1f3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	8b a3       	std	Y+35, r24	; 0x23
    1f44:	9c a3       	std	Y+36, r25	; 0x24
    1f46:	ad a3       	std	Y+37, r26	; 0x25
    1f48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f50:	9e a1       	ldd	r25, Y+38	; 0x26
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	2c f4       	brge	.+10     	; 0x1f6c <main+0x15c>
		__ticks = 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	9a a3       	std	Y+34, r25	; 0x22
    1f68:	89 a3       	std	Y+33, r24	; 0x21
    1f6a:	3f c0       	rjmp	.+126    	; 0x1fea <main+0x1da>
	else if (__tmp > 65535)
    1f6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f70:	8d a1       	ldd	r24, Y+37	; 0x25
    1f72:	9e a1       	ldd	r25, Y+38	; 0x26
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	3f ef       	ldi	r19, 0xFF	; 255
    1f78:	4f e7       	ldi	r20, 0x7F	; 127
    1f7a:	57 e4       	ldi	r21, 0x47	; 71
    1f7c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f80:	18 16       	cp	r1, r24
    1f82:	4c f5       	brge	.+82     	; 0x1fd6 <main+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f84:	6f a1       	ldd	r22, Y+39	; 0x27
    1f86:	78 a5       	ldd	r23, Y+40	; 0x28
    1f88:	89 a5       	ldd	r24, Y+41	; 0x29
    1f8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e2       	ldi	r20, 0x20	; 32
    1f92:	51 e4       	ldi	r21, 0x41	; 65
    1f94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9a a3       	std	Y+34, r25	; 0x22
    1faa:	89 a3       	std	Y+33, r24	; 0x21
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <main+0x1bc>
    1fae:	88 ec       	ldi	r24, 0xC8	; 200
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	98 a3       	std	Y+32, r25	; 0x20
    1fb4:	8f 8f       	std	Y+31, r24	; 0x1f
    1fb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fb8:	98 a1       	ldd	r25, Y+32	; 0x20
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <main+0x1aa>
    1fbe:	98 a3       	std	Y+32, r25	; 0x20
    1fc0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1fc4:	9a a1       	ldd	r25, Y+34	; 0x22
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	9a a3       	std	Y+34, r25	; 0x22
    1fca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fcc:	89 a1       	ldd	r24, Y+33	; 0x21
    1fce:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	69 f7       	brne	.-38     	; 0x1fae <main+0x19e>
    1fd4:	a7 c0       	rjmp	.+334    	; 0x2124 <main+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fda:	8d a1       	ldd	r24, Y+37	; 0x25
    1fdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1fde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9a a3       	std	Y+34, r25	; 0x22
    1fe8:	89 a3       	std	Y+33, r24	; 0x21
    1fea:	89 a1       	ldd	r24, Y+33	; 0x21
    1fec:	9a a1       	ldd	r25, Y+34	; 0x22
    1fee:	9e 8f       	std	Y+30, r25	; 0x1e
    1ff0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ff2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ff4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <main+0x1e6>
    1ffa:	9e 8f       	std	Y+30, r25	; 0x1e
    1ffc:	8d 8f       	std	Y+29, r24	; 0x1d
    1ffe:	92 c0       	rjmp	.+292    	; 0x2124 <main+0x314>
    			_delay_ms(1000);
    		}

    		else {
    			LED_voidOn             (Leds[i - 1]);
    2000:	8c a5       	ldd	r24, Y+44	; 0x2c
    2002:	88 2f       	mov	r24, r24
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9c 01       	movw	r18, r24
    2008:	21 50       	subi	r18, 0x01	; 1
    200a:	30 40       	sbci	r19, 0x00	; 0
    200c:	c9 01       	movw	r24, r18
    200e:	88 0f       	add	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	82 0f       	add	r24, r18
    2014:	93 1f       	adc	r25, r19
    2016:	fc 01       	movw	r30, r24
    2018:	ee 58       	subi	r30, 0x8E	; 142
    201a:	fe 4f       	sbci	r31, 0xFE	; 254
    201c:	60 81       	ld	r22, Z
    201e:	71 81       	ldd	r23, Z+1	; 0x01
    2020:	82 81       	ldd	r24, Z+2	; 0x02
    2022:	0e 94 94 0c 	call	0x1928	; 0x1928 <LED_voidOn>
    			SSD_voidSendNumber     (SSD1, i);
    2026:	80 91 8a 01 	lds	r24, 0x018A
    202a:	90 91 8b 01 	lds	r25, 0x018B
    202e:	a0 91 8c 01 	lds	r26, 0x018C
    2032:	b0 91 8d 01 	lds	r27, 0x018D
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	4c a5       	ldd	r20, Y+44	; 0x2c
    203c:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <SSD_voidSendNumber>
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	aa e7       	ldi	r26, 0x7A	; 122
    2046:	b4 e4       	ldi	r27, 0x44	; 68
    2048:	89 8f       	std	Y+25, r24	; 0x19
    204a:	9a 8f       	std	Y+26, r25	; 0x1a
    204c:	ab 8f       	std	Y+27, r26	; 0x1b
    204e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2050:	69 8d       	ldd	r22, Y+25	; 0x19
    2052:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2054:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2056:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a ef       	ldi	r20, 0xFA	; 250
    205e:	54 e4       	ldi	r21, 0x44	; 68
    2060:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	8d 8b       	std	Y+21, r24	; 0x15
    206a:	9e 8b       	std	Y+22, r25	; 0x16
    206c:	af 8b       	std	Y+23, r26	; 0x17
    206e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2070:	6d 89       	ldd	r22, Y+21	; 0x15
    2072:	7e 89       	ldd	r23, Y+22	; 0x16
    2074:	8f 89       	ldd	r24, Y+23	; 0x17
    2076:	98 8d       	ldd	r25, Y+24	; 0x18
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e8       	ldi	r20, 0x80	; 128
    207e:	5f e3       	ldi	r21, 0x3F	; 63
    2080:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2084:	88 23       	and	r24, r24
    2086:	2c f4       	brge	.+10     	; 0x2092 <main+0x282>
		__ticks = 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9c 8b       	std	Y+20, r25	; 0x14
    208e:	8b 8b       	std	Y+19, r24	; 0x13
    2090:	3f c0       	rjmp	.+126    	; 0x2110 <main+0x300>
	else if (__tmp > 65535)
    2092:	6d 89       	ldd	r22, Y+21	; 0x15
    2094:	7e 89       	ldd	r23, Y+22	; 0x16
    2096:	8f 89       	ldd	r24, Y+23	; 0x17
    2098:	98 8d       	ldd	r25, Y+24	; 0x18
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	3f ef       	ldi	r19, 0xFF	; 255
    209e:	4f e7       	ldi	r20, 0x7F	; 127
    20a0:	57 e4       	ldi	r21, 0x47	; 71
    20a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20a6:	18 16       	cp	r1, r24
    20a8:	4c f5       	brge	.+82     	; 0x20fc <main+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20aa:	69 8d       	ldd	r22, Y+25	; 0x19
    20ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	51 e4       	ldi	r21, 0x41	; 65
    20ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9c 8b       	std	Y+20, r25	; 0x14
    20d0:	8b 8b       	std	Y+19, r24	; 0x13
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <main+0x2e2>
    20d4:	88 ec       	ldi	r24, 0xC8	; 200
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	9a 8b       	std	Y+18, r25	; 0x12
    20da:	89 8b       	std	Y+17, r24	; 0x11
    20dc:	89 89       	ldd	r24, Y+17	; 0x11
    20de:	9a 89       	ldd	r25, Y+18	; 0x12
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <main+0x2d0>
    20e4:	9a 8b       	std	Y+18, r25	; 0x12
    20e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ea:	9c 89       	ldd	r25, Y+20	; 0x14
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	9c 8b       	std	Y+20, r25	; 0x14
    20f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f2:	8b 89       	ldd	r24, Y+19	; 0x13
    20f4:	9c 89       	ldd	r25, Y+20	; 0x14
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	69 f7       	brne	.-38     	; 0x20d4 <main+0x2c4>
    20fa:	14 c0       	rjmp	.+40     	; 0x2124 <main+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fc:	6d 89       	ldd	r22, Y+21	; 0x15
    20fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2100:	8f 89       	ldd	r24, Y+23	; 0x17
    2102:	98 8d       	ldd	r25, Y+24	; 0x18
    2104:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9c 8b       	std	Y+20, r25	; 0x14
    210e:	8b 8b       	std	Y+19, r24	; 0x13
    2110:	8b 89       	ldd	r24, Y+19	; 0x13
    2112:	9c 89       	ldd	r25, Y+20	; 0x14
    2114:	98 8b       	std	Y+16, r25	; 0x10
    2116:	8f 87       	std	Y+15, r24	; 0x0f
    2118:	8f 85       	ldd	r24, Y+15	; 0x0f
    211a:	98 89       	ldd	r25, Y+16	; 0x10
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <main+0x30c>
    2120:	98 8b       	std	Y+16, r25	; 0x10
    2122:	8f 87       	std	Y+15, r24	; 0x0f
    	LED_voidInit   (Leds[i]);
    }

    while (1)
    {
    	LOOP(NUM_OF_LEDS + 1) {
    2124:	8c a5       	ldd	r24, Y+44	; 0x2c
    2126:	8f 5f       	subi	r24, 0xFF	; 255
    2128:	8c a7       	std	Y+44, r24	; 0x2c
    212a:	8c a5       	ldd	r24, Y+44	; 0x2c
    212c:	89 30       	cpi	r24, 0x09	; 9
    212e:	08 f4       	brcc	.+2      	; 0x2132 <main+0x322>
    2130:	bb ce       	rjmp	.-650    	; 0x1ea8 <main+0x98>
    			LED_voidOn             (Leds[i - 1]);
    			SSD_voidSendNumber     (SSD1, i);
    			_delay_ms(1000);
    		}
	}
    	SSD_voidSendNumber     (SSD1,9);
    2132:	80 91 8a 01 	lds	r24, 0x018A
    2136:	90 91 8b 01 	lds	r25, 0x018B
    213a:	a0 91 8c 01 	lds	r26, 0x018C
    213e:	b0 91 8d 01 	lds	r27, 0x018D
    2142:	bc 01       	movw	r22, r24
    2144:	cd 01       	movw	r24, r26
    2146:	49 e0       	ldi	r20, 0x09	; 9
    2148:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <SSD_voidSendNumber>
    	BUZ_voidOn     (BUZ1);
    214c:	60 91 8e 01 	lds	r22, 0x018E
    2150:	70 91 8f 01 	lds	r23, 0x018F
    2154:	80 91 90 01 	lds	r24, 0x0190
    2158:	0e 94 78 06 	call	0xcf0	; 0xcf0 <BUZ_voidOn>
    	LED_voidOn     (RED_led);
    215c:	60 91 91 01 	lds	r22, 0x0191
    2160:	70 91 92 01 	lds	r23, 0x0192
    2164:	80 91 93 01 	lds	r24, 0x0193
    2168:	0e 94 94 0c 	call	0x1928	; 0x1928 <LED_voidOn>
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	aa e7       	ldi	r26, 0x7A	; 122
    2172:	b4 e4       	ldi	r27, 0x44	; 68
    2174:	8b 87       	std	Y+11, r24	; 0x0b
    2176:	9c 87       	std	Y+12, r25	; 0x0c
    2178:	ad 87       	std	Y+13, r26	; 0x0d
    217a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217c:	6b 85       	ldd	r22, Y+11	; 0x0b
    217e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	9e 85       	ldd	r25, Y+14	; 0x0e
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	4a ef       	ldi	r20, 0xFA	; 250
    218a:	54 e4       	ldi	r21, 0x44	; 68
    218c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	8f 83       	std	Y+7, r24	; 0x07
    2196:	98 87       	std	Y+8, r25	; 0x08
    2198:	a9 87       	std	Y+9, r26	; 0x09
    219a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    219c:	6f 81       	ldd	r22, Y+7	; 0x07
    219e:	78 85       	ldd	r23, Y+8	; 0x08
    21a0:	89 85       	ldd	r24, Y+9	; 0x09
    21a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	5f e3       	ldi	r21, 0x3F	; 63
    21ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21b0:	88 23       	and	r24, r24
    21b2:	2c f4       	brge	.+10     	; 0x21be <main+0x3ae>
		__ticks = 1;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	3f c0       	rjmp	.+126    	; 0x223c <main+0x42c>
	else if (__tmp > 65535)
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	3f ef       	ldi	r19, 0xFF	; 255
    21ca:	4f e7       	ldi	r20, 0x7F	; 127
    21cc:	57 e4       	ldi	r21, 0x47	; 71
    21ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21d2:	18 16       	cp	r1, r24
    21d4:	4c f5       	brge	.+82     	; 0x2228 <main+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21da:	8d 85       	ldd	r24, Y+13	; 0x0d
    21dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e2       	ldi	r20, 0x20	; 32
    21e4:	51 e4       	ldi	r21, 0x41	; 65
    21e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
    21fe:	0f c0       	rjmp	.+30     	; 0x221e <main+0x40e>
    2200:	88 ec       	ldi	r24, 0xC8	; 200
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9c 83       	std	Y+4, r25	; 0x04
    2206:	8b 83       	std	Y+3, r24	; 0x03
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <main+0x3fc>
    2210:	9c 83       	std	Y+4, r25	; 0x04
    2212:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221e:	8d 81       	ldd	r24, Y+5	; 0x05
    2220:	9e 81       	ldd	r25, Y+6	; 0x06
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	69 f7       	brne	.-38     	; 0x2200 <main+0x3f0>
    2226:	3e ce       	rjmp	.-900    	; 0x1ea4 <main+0x94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2228:	6f 81       	ldd	r22, Y+7	; 0x07
    222a:	78 85       	ldd	r23, Y+8	; 0x08
    222c:	89 85       	ldd	r24, Y+9	; 0x09
    222e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2230:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	8d 83       	std	Y+5, r24	; 0x05
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	9e 81       	ldd	r25, Y+6	; 0x06
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <main+0x438>
    224c:	9a 83       	std	Y+2, r25	; 0x02
    224e:	89 83       	std	Y+1, r24	; 0x01
    2250:	29 ce       	rjmp	.-942    	; 0x1ea4 <main+0x94>

00002252 <__prologue_saves__>:
    2252:	2f 92       	push	r2
    2254:	3f 92       	push	r3
    2256:	4f 92       	push	r4
    2258:	5f 92       	push	r5
    225a:	6f 92       	push	r6
    225c:	7f 92       	push	r7
    225e:	8f 92       	push	r8
    2260:	9f 92       	push	r9
    2262:	af 92       	push	r10
    2264:	bf 92       	push	r11
    2266:	cf 92       	push	r12
    2268:	df 92       	push	r13
    226a:	ef 92       	push	r14
    226c:	ff 92       	push	r15
    226e:	0f 93       	push	r16
    2270:	1f 93       	push	r17
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	ca 1b       	sub	r28, r26
    227c:	db 0b       	sbc	r29, r27
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	09 94       	ijmp

0000228a <__epilogue_restores__>:
    228a:	2a 88       	ldd	r2, Y+18	; 0x12
    228c:	39 88       	ldd	r3, Y+17	; 0x11
    228e:	48 88       	ldd	r4, Y+16	; 0x10
    2290:	5f 84       	ldd	r5, Y+15	; 0x0f
    2292:	6e 84       	ldd	r6, Y+14	; 0x0e
    2294:	7d 84       	ldd	r7, Y+13	; 0x0d
    2296:	8c 84       	ldd	r8, Y+12	; 0x0c
    2298:	9b 84       	ldd	r9, Y+11	; 0x0b
    229a:	aa 84       	ldd	r10, Y+10	; 0x0a
    229c:	b9 84       	ldd	r11, Y+9	; 0x09
    229e:	c8 84       	ldd	r12, Y+8	; 0x08
    22a0:	df 80       	ldd	r13, Y+7	; 0x07
    22a2:	ee 80       	ldd	r14, Y+6	; 0x06
    22a4:	fd 80       	ldd	r15, Y+5	; 0x05
    22a6:	0c 81       	ldd	r16, Y+4	; 0x04
    22a8:	1b 81       	ldd	r17, Y+3	; 0x03
    22aa:	aa 81       	ldd	r26, Y+2	; 0x02
    22ac:	b9 81       	ldd	r27, Y+1	; 0x01
    22ae:	ce 0f       	add	r28, r30
    22b0:	d1 1d       	adc	r29, r1
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	ed 01       	movw	r28, r26
    22be:	08 95       	ret

000022c0 <_exit>:
    22c0:	f8 94       	cli

000022c2 <__stop_program>:
    22c2:	ff cf       	rjmp	.-2      	; 0x22c2 <__stop_program>
